{
    "docs": [
        {
            "location": "/",
            "text": "Sublime Markdown Popups\n\n\nPopup tooltips for Sublime generated with Markdown.\n\n\n\n\nOverview\n\n\nSublime Markdown Popups (mdpopups) is a library for Sublime Text plugins.  It utilizes the new plugin API found in ST3 Beta 3080+ for generating tooltip popups. It also provides API methods for generating and styling the new phantom elements introduced in ST3 Beta 3118+.  Mdpopups utilizes Python Markdown with a couple of special extensions to convert Markdown to HTML that can be used to create the popups and/or phantoms.  It also provides a number of other helpful API commands to aid in creating great tooltips and phantoms.\n\n\nMdpopups will use your color scheme to create popups/phantoms that fit your editors look.\n\n\n\n\nFeatures\n\n\n\n\nCan take Markdown or HTML and create nice looking popup tooltips and phantoms.\n\n\nDynamically creates popup and phantom themes from your current Sublime color scheme.\n\n\nCan create syntax highlighed code blocks easily using either Pygments or the built-in Sublime Text syntax highlighter automatically in the Markdown environment or outside via API calls.\n\n\nCan create color preview boxes via API calls.\n\n\nA CSS template environment that allows users to override and tweak the overall look of the tooltip and phantom themes to better fit their preferred look.  Using the template filters, users can generically access color scheme colors and manipulate them.\n\n\nPlugins can extend the current CSS to inject plugin specific class styling.  Extended CSS will be run through the template environment.",
            "title": "About Markdown Popups"
        },
        {
            "location": "/#sublime-markdown-popups",
            "text": "Popup tooltips for Sublime generated with Markdown.",
            "title": "Sublime Markdown Popups"
        },
        {
            "location": "/#overview",
            "text": "Sublime Markdown Popups (mdpopups) is a library for Sublime Text plugins.  It utilizes the new plugin API found in ST3 Beta 3080+ for generating tooltip popups. It also provides API methods for generating and styling the new phantom elements introduced in ST3 Beta 3118+.  Mdpopups utilizes Python Markdown with a couple of special extensions to convert Markdown to HTML that can be used to create the popups and/or phantoms.  It also provides a number of other helpful API commands to aid in creating great tooltips and phantoms.  Mdpopups will use your color scheme to create popups/phantoms that fit your editors look.",
            "title": "Overview"
        },
        {
            "location": "/#features",
            "text": "Can take Markdown or HTML and create nice looking popup tooltips and phantoms.  Dynamically creates popup and phantom themes from your current Sublime color scheme.  Can create syntax highlighed code blocks easily using either Pygments or the built-in Sublime Text syntax highlighter automatically in the Markdown environment or outside via API calls.  Can create color preview boxes via API calls.  A CSS template environment that allows users to override and tweak the overall look of the tooltip and phantom themes to better fit their preferred look.  Using the template filters, users can generically access color scheme colors and manipulate them.  Plugins can extend the current CSS to inject plugin specific class styling.  Extended CSS will be run through the template environment.",
            "title": "Features"
        },
        {
            "location": "/installation/",
            "text": "Installation\n\n\nInstalling Sublime Markdown Popups.\n\n\n\n\nPackage Control\n\n\nIn order for your plugin to utilize Markdown Popups, you must be using Package Control, and you must add \nmdpopups\n as a dependency for your plugin.  This can be done in one of two ways, both of which are documented at Package Control\u2019s \ndocuments site\n; see \nUsing Dependencies\n.  Package Control will install the and update the dependency for you.  Package Control will also ensure that \nmdpopups\n is loaded before your plugin loads.\n\n\nRemember, Markdown Popups are for Sublime Text 3 builds 3080+.",
            "title": "Installation"
        },
        {
            "location": "/installation/#installation",
            "text": "Installing Sublime Markdown Popups.",
            "title": "Installation"
        },
        {
            "location": "/installation/#package-control",
            "text": "In order for your plugin to utilize Markdown Popups, you must be using Package Control, and you must add  mdpopups  as a dependency for your plugin.  This can be done in one of two ways, both of which are documented at Package Control\u2019s  documents site ; see  Using Dependencies .  Package Control will install the and update the dependency for you.  Package Control will also ensure that  mdpopups  is loaded before your plugin loads.  Remember, Markdown Popups are for Sublime Text 3 builds 3080+.",
            "title": "Package Control"
        },
        {
            "location": "/usage/",
            "text": "User Guide\n\n\nUsing and configuring Sublime Markdown Popups.\n\n\n\n\nDependencies\n\n\nYour plugin must include the following Package Control dependencies:\n\n\n{\n\n    \n\"*\"\n:\n \n{\n\n        \n\">=3080\"\n:\n \n[\n\n            \n\"pygments\"\n,\n\n            \n\"python-markdown\"\n,\n\n            \n\"mdpopups\"\n,\n\n            \n\"python-jinja2\"\n,\n\n            \n\"markupsafe\"\n\n        \n]\n\n    \n}\n\n\n}\n\n\n\n\n\n\nMarkdown Support\n\n\nMdPopups uses \nPython Markdown\n to parse Markdown and transform it into a tooltip or a phantom (HTML embedded in your file view).  The Markdown environment supports basic Markdown features, but also includes a number of specialty extensions to enhance the environment.  To keep the experience standardized for plugin use, tweaking the Markdown settings is not allowed except for \nnl2br\n as it is not critical and can actually get in the way of formatting the Markdown if not desired.\n\n\nMdPopups includes the following Python Markdown extensions:\n\n\n\n\nattr_list\n allows you to add HTML attributes to block and inline elements easily.\n\n\nnl2br\n turns new lines int \n<\nbr\n>\n tags.\n\n\ndef_list\n adds support for definition lists.\n\n\nadmonition\n provides admonition blocks.\n\n\ncodehilite\n provides syntax highlighted blocks.\n\n\n\n\nMdPopups also includes a couple of 3\nrd\n party extensions (some of which have been modified to work better in the Sublime Text environment).\n\n\n\n\nsuperfences\n provides support for nested fenced blocks. UML support is disabled.\n\n\nbetterem\n is extension that aims to improve emphasis support in Python Markdown. MdPopups leaves it configured in its default state where underscores are handled intelligently: \n_handled_intelligently_\n \u2192 \nhandled_intelligently\n.  Asterisks can be used to do mid word emphasis: \nem*pha*sis\n \u2192 em\npha\nsis.\n\n\nmagiclink\n auto links HTML links.\n\n\ninlinehilite\n allows for inline code highlighting: \n`#!python import module`\n \u2192 \nimport\n \nmodule\n.\n\n\nextrarawhtml\n allows you to add \nmarkdown=\"1\"\n to block html elements to allow content under them to be parsed with Python markdown (inline tags should already have their content parsed).  All this module does is expose this specific functionality from the \nPython Markdown\u2019s Extra extension\n as this functionality could not be enabled without including all of the \nExtra\n extensions other features.  You can read the Python Markdown\u2019s Extra extension documentation to learn more about this feature.\n\n\n\n\n\n\nNew 1.10.0\n\n\nextrarawhtml\n was added.\n\n\n\n\n\n\nNew 1.9.0\n\n\nnl2br\n can be turned off via the \nnl2br\n parameter in \nshow_popup\n, \nadd_phantom\n, \nupdate_popup\n, \nmd2html\n, and \nPhantom\n.\n\n\n\n\nAPI Usage\n\n\nMdPopups provides a number of accessible functions.\n\n\n\n\nDeveloper Guidelines\n\n\nPlugin developers should not try to override the style of existing base classes and elements with plugin injection, but they should use custom plugin classes so that only the specific special elements that must be handled uniquely for the plugin get targeted.  You should use very unique class names (preferably with the plugin\u2019s name as part of the class). This way a user can target and override your class styling if desired. There are a couple of ways to approach this.\n\n\n\n\n\n\nFor Sublime Text 3119+, it is advised to use the \nwrapper_class\n option of the \nshow_popup\n, \nupdate_popup\n, and \nadd_phantom\n commands to wrap your content in a div with the provided class.  That way the developer can provide CSS to style their specific elements via \n.mdpopups\n \n.myplugin-wrapper\n \n.myclass\n \n{}\n or simply \n.myplugin-wrapper\n \n.myclass\n \n{}\n. This is one of the easiest ways, but it is for 3119+ only.\n\n\n\n\n\n\nFor Sublime Text <3119, when injecting your own CSS classes from a plugin, wrapper classes won\u2019t work as Sublime didn\u2019t add CSS support for parent child classes until later. In this case, it is recommend you namespace your classes by appending the plugin name as a prefix so it can be targeted like this: \n.myplugin-myclass\n \n{}\n.  This will give your elements very unique classes that the user can target and override if they choose.\n\n\n\n\n\n\nTo add classes to inline and some block markdown elements you can use the Python Markdown \nattr_list extension syntax\n.  This will work on inline elements and a number of block elements (though sometimes it can be difficult to target certain kinds of block elements).  If all else fails, you can insert raw HTML into your markdown and apply classes directly to the element.\n\n\n\n\n\n\n\n\nversion\n\n\n\n\n(int,) mdpopups.version\n\n\nGet the version of the MdPopups library.  Returns a tuple of integers which represents the major, minor, and patch version.\n\n\n\n\nshow_popup\n\n\n\n\nmdpopups.show_popup\n\n\n\n\nAccepts Markdown and creates a Sublime popup tooltip.  By default, the Pygments syntax highlighter will be used for code highlighting.  Set \nmdpopups.use_sublime_highlighter\n to \ntrue\n in your \nPreferences.sublime-settings\n file if you would like to use the Sublime syntax highlighter.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime.View\n\n\nYes\n\n\n\n\nA Sublime Text view object.\n\n\n\n\n\n\ncontent\n\n\nstring\n\n\nYes\n\n\n\n\nMarkdown/HTML content to be used to create a tooltip.\n\n\n\n\n\n\nmd\n\n\nbool\n\n\nNo\n\n\nTrue\n\n\nDefines whether the content is Markdown and needs to be converterted.\n\n\n\n\n\n\ncss\n\n\nstring\n\n\nNo\n\n\nNone\n\n\nAdditional CSS that will be injected.\n\n\n\n\n\n\nflags\n\n\nint\n\n\nNo\n\n\n0\n\n\nFlags to pass down to the Sublime Text \nview.show_popup\n call.\n\n\n\n\n\n\nlocation\n\n\nint\n\n\nNo\n\n\n-1\n\n\nLocation to show popup in view.  -1 means to show right under the first cursor.\n\n\n\n\n\n\nmax_width\n\n\nint\n\n\nNo\n\n\n320\n\n\nMaximum width of the popup.\n\n\n\n\n\n\nmax_height\n\n\nint\n\n\nNo\n\n\n240\n\n\nMaximum height of the popup.\n\n\n\n\n\n\non_navigate\n\n\nfunction\n\n\nNo\n\n\nNone\n\n\nCallback that receives one variable \nhref\n.\n\n\n\n\n\n\non_hide\n\n\nfunction\n\n\nNo\n\n\nNone\n\n\nCallback for when the tooltip is hidden.\n\n\n\n\n\n\nwrapper_class\n\n\nstring\n\n\nNo\n\n\nNone\n\n\nA string containing the class name you wish wrap your content in.  A \ndiv\n will be created with the given class.\n\n\n\n\n\n\ntemplate_vars\n\n\ndict\n\n\nNo\n\n\nNone\n\n\nA dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content.\n\n\n\n\n\n\ntemplate_env_options\n\n\ndict\n\n\nNo\n\n\nNone\n\n\nA dictionary containing options for the Jinja2 template environment. This \nonly\n applies to the \nHTML/Markdown\n content. Content plugin vars are found under the object: \nplugin\n.\n\n\n\n\n\n\nnl2br\n\n\nbool\n\n\nNo\n\n\nTrue\n\n\nDetermines whether the newline to br Python Markdown extension is enabled or not.\n\n\n\n\n\n\n\n\n\n\nNew 1.9.0\n\n\nwrapper_class\n, \ntemplate_vars\n, \ntemplate_env_options\n, and \nnl2br\n option added in \n1.9.0\n.\n\n\n\n\n\n\n\n\nupdate_popup\n\n\n\n\nmdpopups.update_popup\n\n\n\n\nUpdates the current existing popup.  Set \nmdpopups.use_sublime_highlighter\n to \ntrue\n in your \nPreferences.sublime-settings\n file if you would like to use the Sublime syntax highlighter.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime.View\n\n\nYes\n\n\n\n\nA Sublime Text view object.\n\n\n\n\n\n\ncontent\n\n\nstring\n\n\nYes\n\n\n\n\nMarkdown/HTML content to be used to create a tooltip.\n\n\n\n\n\n\nmd\n\n\nbool\n\n\nNo\n\n\nTrue\n\n\nDefines whether the content is Markdown and needs to be converterted.\n\n\n\n\n\n\ncss\n\n\nstring\n\n\nNo\n\n\nNone\n\n\nCSS text that should be used instead of loading a theme.\n\n\n\n\n\n\nwrapper_class\n\n\nstring\n\n\nNo\n\n\nNone\n\n\nA string containing the class name you wish wrap your content in.  A \ndiv\n will be created with the given class.\n\n\n\n\n\n\ntemplate_vars\n\n\ndict\n\n\nNo\n\n\nNone\n\n\nA dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content.\n\n\n\n\n\n\ntemplate_env_options\n\n\ndict\n\n\nNo\n\n\nNone\n\n\nA dictionary containing options for the Jinja2 template environment. This \nonly\n applies to the \nHTML/Markdown\n content. Content plugin vars are found under the object: \nplugin\n.\n\n\n\n\n\n\nnl2br\n\n\nbool\n\n\nNo\n\n\nTrue\n\n\nDetermines whether the newline to br Python Markdown extension is enabled or not.\n\n\n\n\n\n\n\n\n\n\nNew 1.9.0\n\n\nwrapper_class\n, \ntemplate_vars\n, \ntemplate_env_options\n, and \nnl2br\n option added in \n1.9.0\n.\n\n\n\n\n\n\n\n\nhide_popup\n\n\n\n\nmdpopups.hide_popup\n\n\n\n\nHides the current popup.  Included for convenience and consistency.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime.View\n\n\nYes\n\n\n\n\nA Sublime Text view object.\n\n\n\n\n\n\n\n\n\n\n\n\nis_popup_visible\n\n\n\n\nbool mdpopups.is_popup_visible\n\n\n\n\nChecks if popup is visible in the view. Included for convenience and consistency.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime.View\n\n\nYes\n\n\n\n\nA Sublime Text view object.\n\n\n\n\n\n\n\n\n\n\nNew 1.6.0\n\n\nFeature added in \n1.6.0\n.\n\n\n\n\n\n\n\n\nadd_phantom\n\n\n\n\nint mdpopups.add_phantom\n\n\n\n\nAdds a phantom (embedded HTML in the file view) and returns the phantom id.  Returns an integer.\n\nAccepts Markdown and creates a Sublime phantom (embedded HTML in the file view).  By default, the Pygments syntax highlighter will be used for code highlighting.  Set \nmdpopups.use_sublime_highlighter\n to \ntrue\n in your \nPreferences.sublime-settings\n file if you would like to use the Sublime syntax highlighter.  On completion of the phantom, the function will return the phantom id which is an integer.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime.View\n\n\nYes\n\n\n\n\nA Sublime Text view object.\n\n\n\n\n\n\nkey\n\n\nstring\n\n\nYes\n\n\n\n\nA key that is associated with the given phantom.  Multiple phantoms can share the same key, but each phantom will have its own id.\n\n\n\n\n\n\nregion\n\n\nsublime.Region\n\n\nYes\n\n\n\n\nRegion in the view where the phantom should be inserted.\n\n\n\n\n\n\ncontent\n\n\nstring\n\n\nYes\n\n\n\n\nMarkdown/HTML content to be used to create a phantom.\n\n\n\n\n\n\nlayout\n\n\nint\n\n\nYes\n\n\n\n\nHow the HTML content should be inserted.  Acceptable values are: \nsublime.LAYOUT_INLINE\n, \nsublime.LAYOUT_BLOCK\n, and \nsublime.LAYOUT_BELOW\n.\n\n\n\n\n\n\nmd\n\n\nbool\n\n\nNo\n\n\nTrue\n\n\nDefines whether the content is Markdown and needs to be converterted.\n\n\n\n\n\n\ncss\n\n\nstring\n\n\nNo\n\n\nNone\n\n\nAdditional CSS that will be injected.\n\n\n\n\n\n\non_navigate\n\n\nfunction\n\n\nNo\n\n\nNone\n\n\nCallback that receives one variable \nhref\n.\n\n\n\n\n\n\nwrapper_class\n\n\nstring\n\n\nNo\n\n\nNone\n\n\nA string containing the class name you wish wrap your content in.  A \ndiv\n will be created with the given class.\n\n\n\n\n\n\ntemplate_vars\n\n\ndict\n\n\nNo\n\n\nNone\n\n\nA dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content.\n\n\n\n\n\n\ntemplate_env_options\n\n\ndict\n\n\nNo\n\n\nNone\n\n\nA dictionary containing options for the Jinja2 template environment. This \nonly\n applies to the \nHTML/Markdown\n content. Content plugin vars are found under the object: \nplugin\n.\n\n\n\n\n\n\nnl2br\n\n\nbool\n\n\nNo\n\n\nTrue\n\n\nDetermines whether the newline to br Python Markdown extension is enabled or not.\n\n\n\n\n\n\n\n\n\n\nNew 1.9.0\n\n\nwrapper_class\n, \ntemplate_vars\n, \ntemplate_env_options\n, and \nnl2br\n option added in \n1.9.0\n.\n\n\n\n\n\n\nNew 1.6.0\n\n\nFeature added in \n1.6.0\n.\n\n\n\n\n\n\n\n\nerase_phantoms\n\n\n\n\nmdpopups.erase_phantoms\n\n\n\n\nErase all phantoms associated to the given key.  Included for convenience and consistency.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime.View\n\n\nYes\n\n\n\n\nA Sublime Text view object.\n\n\n\n\n\n\nkey\n\n\nstring\n\n\nYes\n\n\n\n\nA key that is associated with phantoms.  Multiple phantoms can share the same key, but each phantom will have its own id.\n\n\n\n\n\n\n\n\n\n\nNew 1.6.0\n\n\nFeature added in \n1.6.0\n.\n\n\n\n\n\n\n\n\nerase_phantom_by_id\n\n\n\n\nmdpopups.erase_phantom_by_id\n\n\n\n\nErase a single phantom by passing its id.  Included for convenience and consistency.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime.View\n\n\nYes\n\n\n\n\nA Sublime Text view object.\n\n\n\n\n\n\npid\n\n\nstring\n\n\nYes\n\n\n\n\nThe id associated with a single phantom.  Multiple phantoms can share the same key, but each phantom will have its own id.\n\n\n\n\n\n\n\n\n\n\nNew 1.6.0\n\n\nFeature dded in \n1.6.0\n.\n\n\n\n\n\n\n\n\nquery_phantom\n\n\n\n\n[sublime.Region] mdpopups.query_phantom\n\n\n\n\nQuery the location of a phantom by specifying its id.  A list of \nsublime.Region\ns will be returned.  If the phantom with the given id is not found, the region will be returned with positions of \n(-1, -1)\n.  Included for convenience and consistency.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime.View\n\n\nYes\n\n\n\n\nA Sublime Text view object.\n\n\n\n\n\n\npid\n\n\nint\n\n\nYes\n\n\n\n\nThe id associated with a single phantom.  Multiple phantoms can share the same key, but each phantom will have its own id.\n\n\n\n\n\n\n\n\n\n\nNew 1.6.0\n\n\nFeature added in \n1.6.0\n.\n\n\n\n\n\n\n\n\nquery_phantoms\n\n\n\n\n[sublime.Region] mdpopups.query_phantoms\n\n\n\n\nQuery the location of multiple phantoms by specifying their ids.  A list of \nsublime.Region\ns will be returned where each index corresponds to the index of ids that was passed in.  If a given phantom id is not found, that region will be returned with positions of \n(-1, -1)\n.  Included for convenience and consistency.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime.View\n\n\nYes\n\n\n\n\nA Sublime Text view object.\n\n\n\n\n\n\npids\n\n\n[int]\n\n\nYes\n\n\n\n\nThe id associated with a single phantom.  Multiple phantoms can share the same key, but each phantom will have its own id.\n\n\n\n\n\n\n\n\n\n\nNew 1.6.0\n\n\nFeature added in \n1.6.0\n.\n\n\n\n\n\n\n\n\nclass Phantom\n\n\n\n\nmdpopups.Phantoms\n\n\n\n\nA phantom object for use with \nPhantomSet\n.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nregion\n\n\nsublime.Region\n\n\nYes\n\n\n\n\nRegion in the view where the phantom should be inserted.\n\n\n\n\n\n\ncontent\n\n\nstring\n\n\nYes\n\n\n\n\nMarkdown/HTML content to be used to create a phantom.\n\n\n\n\n\n\nlayout\n\n\nint\n\n\nYes\n\n\n\n\nHow the HTML content should be inserted.  Acceptable values are: \nsublime.LAYOUT_INLINE\n, \nsublime.LAYOUT_BLOCK\n, and \nsublime.LAYOUT_BELOW\n.\n\n\n\n\n\n\nmd\n\n\nbool\n\n\nNo\n\n\nTrue\n\n\nDefines whether the content is Markdown and needs to be converterted.\n\n\n\n\n\n\ncss\n\n\nstring\n\n\nNo\n\n\nNone\n\n\nAdditional CSS that will be injected.\n\n\n\n\n\n\non_navigate\n\n\nfunction\n\n\nNo\n\n\nNone\n\n\nCallback that receives one variable \nhref\n.\n\n\n\n\n\n\nwrapper_class\n\n\nstring\n\n\nNo\n\n\nNone\n\n\nA string containing the class name you wish wrap your content in.  A \ndiv\n will be created with the given class.\n\n\n\n\n\n\ntemplate_vars\n\n\ndict\n\n\nNo\n\n\nNone\n\n\nA dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content.\n\n\n\n\n\n\ntemplate_env_options\n\n\ndict\n\n\nNo\n\n\nNone\n\n\nA dictionary containing options for the Jinja2 template environment. This \nonly\n applies to the \nHTML/Markdown\n content. Content plugin vars are found under the object: \nplugin\n.\n\n\n\n\n\n\nnl2br\n\n\nbool\n\n\nNo\n\n\nTrue\n\n\nDetermines whether the newline to br Python Markdown extension is enabled or not.\n\n\n\n\n\n\n\n\nAttributes\n\n\n\n\n\n\n\n\nAttribute\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nregion\n\n\nsublime.Region\n\n\nRegion in the view where the phantom should be inserted.\n\n\n\n\n\n\ncontent\n\n\nstring\n\n\nMarkdown/HTML content to be used to create a phantom.\n\n\n\n\n\n\nlayout\n\n\nint\n\n\nHow the HTML content should be inserted.  Acceptable values are: \nsublime.LAYOUT_INLINE\n, \nsublime.LAYOUT_BLOCK\n, and \nsublime.LAYOUT_BELOW\n.\n\n\n\n\n\n\nmd\n\n\nbool\n\n\nDefines whether the content is Markdown and needs to be converterted.\n\n\n\n\n\n\ncss\n\n\nstring\n\n\nAdditional CSS that will be injected.\n\n\n\n\n\n\non_navigate\n\n\nfunction\n\n\nCallback that receives one variable \nhref\n.\n\n\n\n\n\n\nwrapper_class\n\n\nstring\n\n\nA string containing the class name you wish wrap your content in.  A \ndiv\n will be created with the given class.\n\n\n\n\n\n\ntemplate_vars\n\n\ndict\n\n\nA dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content.\n\n\n\n\n\n\ntemplate_env_options\n\n\ndict\n\n\nA dictionary containing options for the Jinja2 template environment. This \nonly\n applies to the \nHTML/Markdown\n content. Content plugin vars are found under the object: \nplugin\n.\n\n\n\n\n\n\nnl2br\n\n\nbool\n\n\nDetermines whether the newline to br Python Markdown extension is enabled or not.\n\n\n\n\n\n\n\n\n\n\nNew 1.9.0\n\n\nwrapper_class\n, \ntemplate_vars\n, \ntemplate_env_options\n, and \nnl2br\n option added in \n1.9.0\n.\n\n\n\n\n\n\nNew 1.6.1\n\n\nFeature added in \n1.6.1\n.\n\n\n\n\n\n\n\n\nclass PhantomSet\n\n\n\n\nmdpopups.PhantomSet\n\n\n\n\nA class that allows you to update phantoms under the specified key.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime.View\n\n\nYes\n\n\n\n\nA Sublime Text view object.\n\n\n\n\n\n\nkey\n\n\nstring\n\n\nYes\n\n\n\n\nThe key that should be associated with all related phantoms in the set.\n\n\n\n\n\n\n\n\nMethods\n\n\n\n\nmdpopups.PhantomSet.update\n\n\n\n\nUpdate all the phantoms in the set with the given phantom list.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnew_phantoms\n\n\n[\nmdpopups.Phantom\n]\n\n\nYes\n\n\n\n\nA list of mdpopup phantoms. \nsublime.Phantom\n will be converted to \nmdpopups.Phantom\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNew 1.6.1\n\n\nFeature added in \n1.6.1\n.\n\n\n\n\n\n\n\n\nclear_cache\n\n\n\n\nmdpopups.clear_cache\n\n\nClears the CSS theme related caches.\n\n\n\n\nmd2html\n\n\n\n\nmdpopups.md2html\n\n\n\n\nExposes the Markdown to HTML converter in case it is desired to parse only a section of markdown.  This works well for someone who wants to work directly in HTML, but might want to still have fragments of markdown that they would like to occasionally convert. Code highlighting will use either Pygments or the native Sublime syntax highlighter.  Set \nmdpopups.use_sublime_highlighter\n to \ntrue\n if you want to use the Sublime syntax highlighter.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime.View\n\n\nYes\n\n\n\n\nSublime text View object.\n\n\n\n\n\n\nmarkup\n\n\nstring\n\n\nYes\n\n\n\n\nThe markup code to be converted.\n\n\n\n\n\n\ntemplate_vars\n\n\ndict\n\n\nNo\n\n\nNone\n\n\nA dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content.\n\n\n\n\n\n\ntemplate_env_options\n\n\ndict\n\n\nNo\n\n\nNone\n\n\nA dictionary containing options for the Jinja2 template environment. This \nonly\n applies to the \nHTML/Markdown\n content. Content plugin vars are found under the object: \nplugin\n.\n\n\n\n\n\n\nnl2br\n\n\nbool\n\n\nNo\n\n\nTrue\n\n\nDetermines whether the newline to br Python Markdown extension is enabled or not.\n\n\n\n\n\n\n\n\n\n\nNew 1.9.0\n\n\ntemplate_vars\n, \ntemplate_env_options\n, and \nnl2br\n option added in \n1.9.0\n.\n\n\n\n\n\n\n\n\ncolor_box\n\n\n\n\nstring mdpopups.color_box\n\n\n\n\nGenerates a color preview box image encoded in base64 and formated to be inserted right in your your Markdown or HTML code as an \nimg\n tag.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncolors\n\n\n[string]\n\n\nYes\n\n\n\n\nA list of color strings formatted as \n#RRGGBBAA\n where \nR\n is the red channel, \nG\n is the green channel, \nB\n is the blue channel, and \nA\n is the alpha channel.\n\n\n\n\n\n\nborder\n\n\nstring\n\n\nYes\n\n\n\n\nThe color for the color box border.  Input is a RGB color formatted as \n#RRGGBB\n.\n\n\n\n\n\n\nborder2\n\n\nstring\n\n\nNo\n\n\nNone\n\n\nThe optional secondary border color.  This is great if you are going to have it on a light and dark backgrounds.  You can use a double border so the color stands out regardless of the background.  Input is a RGB color formatted as \n#RRGGBB\n.\n\n\n\n\n\n\nheight\n\n\nint\n\n\nNo\n\n\n32\n\n\nHeight of color box.\n\n\n\n\n\n\nwidth\n\n\nint\n\n\nNo\n\n\n32\n\n\nWidth of color box.\n\n\n\n\n\n\nborder_size\n\n\nint\n\n\nNo\n\n\n1\n\n\nWidth of the color box border.  If using \nborder2\n, the value should be set to at least 2 to see both colors.\n\n\n\n\n\n\ncheck_size\n\n\nint\n\n\nNo\n\n\n4\n\n\nSize of checkered box squares used for the background of transparent colors.\n\n\n\n\n\n\nmax_colors\n\n\nint\n\n\nNo\n\n\n5\n\n\nMax number of colors that will be evaluated in the \ncolors\n parameter.  Multiple colors are used to to create palette boxes showing multiple colors lined up horizontally.\n\n\n\n\n\n\nalpha\n\n\nbool\n\n\nNo\n\n\nFalse\n\n\nWill create color box images with a real alpha channel instead of simulating one with a checkered background.\n\n\n\n\n\n\nborder_map\n\n\nint\n\n\nNo\n\n\n0xF\n\n\nA mapping of which borders to show.  Where \n0x1\n is \nTOP\n, \n0x2\n is \nLEFT\n, \n0x4\n is \nBOTTOM\n, \n0x8\n is \nRIGHT\n.  Map flags can be accessed via \nmdpopups.colorbox.TOP\n etc.\n\n\n\n\n\n\n\n\n\n\n\n\ncolor_box_raw\n\n\n\n\nbytes mdpopups.color_box\n\n\n\n\nGenerates a color preview box image and returns the raw byte string of the image.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncolors\n\n\n[string]\n\n\nYes\n\n\n\n\nA list of color strings formatted as \n#RRGGBBAA\n where \nR\n is the red channel, \nG\n is the green channel, \nB\n is the blue channel, and \nA\n is the alpha channel.\n\n\n\n\n\n\nborder\n\n\nstring\n\n\nYes\n\n\n\n\nThe color for the color box border.  Input is a RGB color formatted as \n#RRGGBB\n.\n\n\n\n\n\n\nborder2\n\n\nstring\n\n\nNo\n\n\nNone\n\n\nThe optional secondary border color.  This is great if you are going to have it on a light and dark backgrounds.  You can use a double border so the color stands out regardless of the background.  Input is a RGB color formatted as \n#RRGGBB\n.\n\n\n\n\n\n\nheight\n\n\nint\n\n\nNo\n\n\n32\n\n\nHeight of color box.\n\n\n\n\n\n\nwidth\n\n\nint\n\n\nNo\n\n\n32\n\n\nWidth of color box.\n\n\n\n\n\n\nborder_size\n\n\nint\n\n\nNo\n\n\n1\n\n\nWidth of the color box border.  If using \nborder2\n, the value should be set to at least 2 to see both colors.\n\n\n\n\n\n\ncheck_size\n\n\nint\n\n\nNo\n\n\n4\n\n\nSize of checkered box squares used for the background of transparent colors.\n\n\n\n\n\n\nmax_colors\n\n\nint\n\n\nNo\n\n\n5\n\n\nMax number of colors that will be evaluated in the \ncolors\n parameter.  Multiple colors are used to to create palette boxes showing multiple colors lined up horizontally.\n\n\n\n\n\n\nalpha\n\n\nbool\n\n\nNo\n\n\nFalse\n\n\nWill create color box images with a real alpha channel instead of simulating one with a checkered background.\n\n\n\n\n\n\nborder_map\n\n\nint\n\n\nNo\n\n\n0xF\n\n\nA mapping of which borders to show.  Where \n0x1\n is \nTOP\n, \n0x2\n is \nLEFT\n, \n0x4\n is \nBOTTOM\n, \n0x8\n is \nRIGHT\n.  Map flags can be accessed via \nmdpopups.colorbox.TOP\n etc.\n\n\n\n\n\n\n\n\n\n\nNew 1.7.0\n\n\nFeature dded in \n1.7.0\n.\n\n\n\n\n\n\n\n\ntint\n\n\n\n\nstring mdpopups.tint\n\n\n\n\nTakes a either a path to an png or a byte string of a png and tints it with a specific color and returns a string containing the base64 encoded png in an HTML element.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nimg\n\n\nstring/bytes\n\n\nYes\n\n\n\n\nEither a string in the form \nPackages/Package/resource.png\n or a byte string of a png image.\n\n\n\n\n\n\ncolor\n\n\nstring\n\n\nYes\n\n\n\n\nA string in the form of \n#RRGGBB\n or \n#RRGGBBAA\n (alpha layer will be stripped and ignored and is only allowed to make it easy to pass in colors from a color scheme).\n\n\n\n\n\n\nopacity\n\n\nint\n\n\nNo\n\n\n255\n\n\nAn integer value between 0 - 255 that specifies the opacity of the tint.\n\n\n\n\n\n\nheight\n\n\nint\n\n\nNo\n\n\nNone\n\n\nHeight that should be specified in the return HTML element.\n\n\n\n\n\n\nwidth\n\n\nint\n\n\nNo\n\n\nNone\n\n\nWidth that should be specified in the return HTML element.\n\n\n\n\n\n\n\n\n\n\nNew 1.7.0\n\n\nFeature added in \n1.7.0\n.\n\n\n\n\n\n\n\n\ntint_raw\n\n\n\n\nbytes mdpopups.tint_raw\n\n\n\n\nTakes a either a path to an png or a byte string of a png and tints it with a specific color and returns a byte string of the modified png.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nimg\n\n\nstring/bytes\n\n\nYes\n\n\n\n\nEither a string in the form \nPackages/Package/resource.png\n or a byte string of a png image.\n\n\n\n\n\n\ncolor\n\n\nstring\n\n\nYes\n\n\n\n\nA string in the form of \n#RRGGBB\n or \n#RRGGBBAA\n (alpha layer will be stripped and ignored and is only allowed to make it easy to pass in colors from a color scheme).\n\n\n\n\n\n\nopacity\n\n\nint\n\n\nNo\n\n\n255\n\n\nAn integer value between 0 - 255 that specifies the opacity of the tint.\n\n\n\n\n\n\n\n\n\n\nNew 1.7.0\n\n\nFeature added in \n1.7.0\n.\n\n\n\n\n\n\n\n\nscope2style\n\n\n\n\ndict mdpopups.scope2style\n\n\n\n\nTakes a sublime scope (complexity doesn\u2019t matter), and guesses the style that would be applied.  While there may be untested corner cases with complex scopes where it fails, in general, it is usually accurate.  The returned dictionary is in the form:\n\n\n{\n\n    \n# Colors will be None if not found,\n\n    \n# though usually, even if the scope has no color\n\n    \n# it will return the overall theme foreground.\n\n    \n#\n\n    \n# Background might be None if using `explicit_background`\n\n    \n# as it only returns a background if that style specifically\n\n    \n# defines a background.\n\n    \n\"color\"\n:\n \n\"#RRGGBB\"\n,\n\n    \n\"background\"\n:\n \n\"#RRGGBB\"\n,\n\n    \n# Style will usually be either 'bold', 'italic'.\n\n    \n# Multiple styles may be returned 'bold italic' or an empty string ''.\n\n    \n\"style\"\n:\n \n'bold italic'\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime.View\n\n\nYes\n\n\n\n\nSublime text View object so that the correct color scheme will be searched.\n\n\n\n\n\n\nscope\n\n\nstring\n\n\nYes\n\n\n\n\nThe scope to search for.\n\n\n\n\n\n\nselected\n\n\nbool\n\n\nNo\n\n\nFalse\n\n\nWhether this scope is in a selected state (selected text).\n\n\n\n\n\n\nexplicit_background\n\n\nbool\n\n\nNo\n\n\nFalse\n\n\nOnly return a background if one is explicitly defined in the color scheme.\n\n\n\n\n\n\n\n\n\n\nNew 1.7.0\n\n\nFeature added in \n1.7.0\n.\n\n\n\n\n\n\n\n\nsyntax_highlight\n\n\n\n\nmdpopups.syntax_highlight\n\n\n\n\nAllows for syntax highlighting outside the Markdown environment.  You can just feed it code directly and give it the language of your choice, and you will be returned a block of HTML that has been syntax highlighted.  This does not have to be in markdown format.  Just give it plain text to convert to highlighted HTML. \nsyntax_highlight\n will use either Pygments or the native Sublime syntax highlighter.  Set \nmdpopups.use_sublime_highlighter\n to \ntrue\n if you want to use the Sublime syntax highlighter.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime.View\n\n\nYes\n\n\n\n\nSublime text View object.\n\n\n\n\n\n\nsrc\n\n\nstring\n\n\nYes\n\n\n\n\nThe source code to be converted.  No \n```\n needed.\n\n\n\n\n\n\nlanguage\n\n\nstring\n\n\nNo\n\n\nNone\n\n\nSpecifies the language to highlight as.\n\n\n\n\n\n\ninline\n\n\nbool\n\n\nNo\n\n\nFalse\n\n\nWill return the code formatted for inline display.\n\n\n\n\n\n\n\n\n\n\n\n\nget_language_from_view\n\n\n\n\nmdpopups.get_language_from_view\n\n\n\n\nAllows a user to extract the equivalent language specifier for \nmdpopups.syntax_highlight\n from a view.  If the language cannot be determined, \nNone\n will be returned.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime.View\n\n\nYes\n\n\n\n\nSublime text View object.\n\n\n\n\n\n\n\n\n\n\n\n\nGlobal User Settings\n\n\nAll settings for \nMdPopups\n are placed in Sublime\u2019s \nPreferences.sublime-settings\n.  They are global and work no for whatever plugin uses the MdPopups API.\n\n\nmdpopups.debug\n\n\nTurns on debug mode.  This will dump out all sorts of info to the console.  Content before parsing to HTML, final HTML output, traceback from failures, etc..  This is more useful for plugin developers.  It works by specifying an error level.  \n0\n or \nfalse\n would disable it.  1 would trigger on errors. 2 would trigger on warnings and any level below.  3 would be general info (like HTML output) and any level below.\n\n\n    \n\"mdpopups.debug\"\n:\n \n1\n,\n\n\n\n\n\n\nmdpopups.disable\n\n\nGlobal kill switch to prevent popups (created by MdPopups) from appearing.\n\n\n    \n\"mdpopups.disable\"\n:\n \ntrue\n,\n\n\n\n\n\n\nmdpopups.cache_refresh_time\n\n\nControl how long a CSS theme file will be in the cache before being refreshed.  Value should be a positive integer greater than 0.  Units are in minutes.  Default is 30.\n\n\n    \n\"mdpopups.cache_refresh_time\"\n:\n \n30\n,\n\n\n\n\n\n\nmdpopups.cache_limit\n\n\nControl how many CSS theme files will be kept in cache at any given time.  Value should be a positive integer greater than or equal to 0.\n\n\n    \n\"mdpopups.cache_limit\"\n:\n \n10\n\n\n\n\n\n\nmdpopups.use_sublime_highlighter\n\n\nControls whether the Pygments or the native Sublime syntax highlighter is used for code highlighting.  This affects code highlighting in Markdown conversion] via and when \nmd2html\n and when code is directly processed using \nsyntax_highlight\n. To learn more about the syntax highlighter see \nSyntax Highlighting\n.\n\n\n    \n\"mdpopups.use_sublime_highlighter\"\n:\n \ntrue\n\n\n\n\n\n\nmdpopups.user_css\n\n\nOverrides the default CSS theme.  Value should be a relative path pointing to the CSS theme file: \nPackages/User/my_custom_theme.css\n.  Slashes should be forward slashes. By default, it will point to \nPackages/User/mdpopups.css\n.  User CSS overrides all CSS: base, default, plugin, etc.\n\n\n    \n\"mdpopups.use_sublime_highlighter\"\n:\n \n\"Packages/User/mdpopups.css\"\n\n\n\n\n\n\nmdpopups.default_formatting\n\n\nControls whether mdpopups default formatting (contained in \nbase.css\n) will be applied or not.\n\n\n\n\nNew 1.9.0\nAdded in \n1.9.0\n.\n\n\n\n\n\n\nmdpopups.default_style\n\n\nControls whether mdpopups default styling (contained in \ndefault.css\n) will be applied or not.\n\n\n\n\nNew 1.13.0\nAdded in \n1.13.0\n.\n\n\n\n\n\n\nmdpopups.sublime_user_lang_map\n\n\nThis is a special setting allowing the mapping of personal syntax languages which are not yet included or will not be included in the official mapping table.  You can either define your own new entry, or use the name of an existing entry to extend language keywords or syntax languages.  When extending, user keywords and languages will be cycled through first.\n\n\n    \n'mdpopups.sublime_user_lang_map'\n:\n \n{\n\n        \n\"language\"\n:\n \n((\n'keywords'\n,),\n \n(\n'MyPackage/MySyntaxLanguage'\n))\n\n    \n}\n\n\n\n\n\n\nExample\n:\n\n\n'mdpopups.sublime_user_lang_map'\n:\n \n{\n\n    \n'javascript'\n:\n \n((\n'javascript'\n,\n \n'js'\n),\n \n(\n'JavaScript/JavaScript'\n,\n \n'JavaScriptNext - ES6 Syntax/JavaScriptNext'\n))\n\n\n}\n\n\n\n\n\n\nFor a list of all currently supported syntax mappings, see the official \nmapping file\n.\n\n\nmdpopups.font_scale\n\n\nSublime currently doesn\u2019t account for font scaling.  For example, if you have a 4K monitor on Windows, and you set the OS font scaling to 125% in your system settings, all your font sizes in your popups and phantoms will be approximately 25% too small.  This feature aims to fix this.  By default, mdpopups will try to guess the scaling on Windows, but it can only guess on Windows currently.  If you don\u2019t like what it guesses, or you are on Linux or OSX, you can specify a scale here.\n\n\nAll sizes that are run through the \nrelativesize\n filter use the size of the \nfont_size\n variable found in the a file view\u2019s settings as the reference.  It seems that this value is closest to a \npx\n font size.  \nmdpopups.font_scale\n will only be applied to sizes run through the \nrelativesize\n filter, and I personally recommend using \npx\n for fonts (or maybe even \npt\n as they seemed all right, but I\u2019ve seen funny things when using \nem\n sizes even though seem to calculate fine).\n\n\nValue should be a positive integer or float.  The default value is \n0\n. On Windows, if you set it to \n0\n, it will guess your font scale.  Setting this value to \n1\n effectively disables it and since you are using a scale of one, no adjustments are made.  On Linux and OSX, either \n0\n or \n1\n effectively disables the feature.\n\n\nSo if your OS font scaling is set to 125%, you would probably want to set the scale factor to \n1.25\n to increase your popup/phantom font sizes to 125% from its calculated 100%.\n\n\n'mdpopups.font_scale'\n:\n \n0\n,\n\n\n\n\n\n\nSyntax Highlighting\n\n\nMdPopups has two syntax highlighting methods: one is Pygments, the other is Sublimes native syntax highlighters.  When developing a plugin, it is wise to test out both as a syntax mapping may be needed for the Sublime Syntax Highlighter; mappings can be added locally and/or to the main repository via pull requests.\n\n\nPygments\n\n\n\n\nNote\n\n\nSublime Text 3119 allows for parent and child class in the form \n.class1\n \n.class2\n.  If you are on 3119 or later, Pygments class will be formatted as \n.mdpopups\n \n.highight\n \n.class\n,\n \n.mdpopups\n \n.inline-highlight\n \n.class\n.  Keep this in mind as you are reading.  The main thing you need to know is that you can customize the background and/or main font color by using the following for ST 3119+:\n\n\n.mdpopups\n \n.highlight\n,\n \n.mdpopups\n \n.inline-highlight\n \n{\n \nbackground-color\n:\n \n#f8f8f8\n;\n \ncolor\n:\n \n#4d4d4c\n \n}\n\n\n\n\n\n\nOn ST < 3119, you cannot use the parent and child classes, so the CSS is limited:\n\n\n.highlight\n,\n \n.inline-highlight\n \n{\n \nbackground-color\n:\n \n#f8f8f8\n;\n \ncolor\n:\n \n#4d4d4c\n \n}\n\n\n\n\n\n\n\n\nPygments has a great variety of highlighters out of the box.  It also comes with a number of built-in color schemes that can be used.  Pygments themes are loaded up using the \nCSS template\n.  You can either specify an existing one, paste your own in.  Due to the limitations of the Sublime HTML and CSS engine, you must format your personal Pygments them to work well.\n\n\nTraditionally Pygments CSS classes are given not only syntax classes applied to each span, but an overall class as assigned to a div wrapper as well.  For instance, a class for whitespace may look like this (where \n.highlight\n is the div wrapper\u2019s class and \n.w\n i the span\u2019s class):\n\n\n.highlight\n \n.w\n \n{\n \ncolor\n:\n \n#cccccc\n \n}\n \n/* Text.Whitespace */\n\n\n\n\n\n\nBut the sublime CSS engine doesn\u2019t support parent and child classes like \n.highlight\n \n.w\n; it supports either single or multiple classes on one element like \n.class1.class2\n.  Because of this, the \n.highlight\n class must be stripped out.\n\n\n.w\n \n{\n \ncolor\n:\n \n#cccccc\n \n}\n \n/* Text.Whitespace */\n\n\n\n\n\n\nMdPopups also needs both classes \n.highlgiht\n and \n.inline-highlight\n to be styled with the foreground and background color:\n\n\n.highlight\n,\n \n.inline-highlight\n \n{\n \nbackground-color\n:\n \n#f8f8f8\n;\n \ncolor\n:\n \n#4d4d4c\n \n}\n\n\n\n\n\n\nFull Example\n:\n\n\n.highlight\n,\n \n.inline-highlight\n \n{\n \nbackground-color\n:\n \n#f8f8f8\n;\n \ncolor\n:\n \n#4d4d4c\n \n}\n\n\n.c\n \n{\n \ncolor\n:\n \n#8e908c\n;\n \nfont-style\n:\n \nitalic\n \n}\n \n/* Comment */\n\n\n.err\n \n{\n \ncolor\n:\n \n#c82829\n \n}\n \n/* Error */\n\n\n.k\n \n{\n \ncolor\n:\n \n#8959a8\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Keyword */\n\n\n.l\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal */\n\n\n.n\n \n{\n \ncolor\n:\n \n#4d4d4c\n \n}\n \n/* Name */\n\n\n.o\n \n{\n \ncolor\n:\n \n#3e999f\n \n}\n \n/* Operator */\n\n\n.p\n \n{\n \ncolor\n:\n \n#4d4d4c\n \n}\n \n/* Punctuation */\n\n\n.cm\n \n{\n \ncolor\n:\n \n#8e908c\n;\n \nfont-style\n:\n \nitalic\n \n}\n \n/* Comment.Multiline */\n\n\n.cp\n \n{\n \ncolor\n:\n \n#8e908c\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Comment.Preproc */\n\n\n.c1\n \n{\n \ncolor\n:\n \n#8e908c\n;\n \nfont-style\n:\n \nitalic\n \n}\n \n/* Comment.Single */\n\n\n.cs\n \n{\n \ncolor\n:\n \n#8e908c\n;\n \nfont-style\n:\n \nitalic\n \n}\n \n/* Comment.Special */\n\n\n.gd\n \n{\n \ncolor\n:\n \n#c82829\n \n}\n \n/* Generic.Deleted */\n\n\n.ge\n \n{\n \nfont-style\n:\n \nitalic\n \n}\n \n/* Generic.Emph */\n\n\n.gh\n \n{\n \ncolor\n:\n \n#4d4d4c\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Generic.Heading */\n\n\n.gi\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Generic.Inserted */\n\n\n.gp\n \n{\n \ncolor\n:\n \n#8e908c\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Generic.Prompt */\n\n\n.gs\n \n{\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Generic.Strong */\n\n\n.gu\n \n{\n \ncolor\n:\n \n#3e999f\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Generic.Subheading */\n\n\n.kc\n \n{\n \ncolor\n:\n \n#8959a8\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Keyword.Constant */\n\n\n.kd\n \n{\n \ncolor\n:\n \n#8959a8\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Keyword.Declaration */\n\n\n.kn\n \n{\n \ncolor\n:\n \n#8959a8\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Keyword.Namespace */\n\n\n.kp\n \n{\n \ncolor\n:\n \n#8959a8\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Keyword.Pseudo */\n\n\n.kr\n \n{\n \ncolor\n:\n \n#8959a8\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Keyword.Reserved */\n\n\n.kt\n \n{\n \ncolor\n:\n \n#eab700\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Keyword.Type */\n\n\n.ld\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Literal.Date */\n\n\n.m\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal.Number */\n\n\n.s\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Literal.String */\n\n\n.na\n \n{\n \ncolor\n:\n \n#4271ae\n \n}\n \n/* Name.Attribute */\n\n\n.nb\n \n{\n \ncolor\n:\n \n#4271ae\n \n}\n \n/* Name.Builtin */\n\n\n.nc\n \n{\n \ncolor\n:\n \n#c82829\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Name.Class */\n\n\n.no\n \n{\n \ncolor\n:\n \n#c82829\n \n}\n \n/* Name.Constant */\n\n\n.nd\n \n{\n \ncolor\n:\n \n#3e999f\n \n}\n \n/* Name.Decorator */\n\n\n.ni\n \n{\n \ncolor\n:\n \n#4d4d4c\n \n}\n \n/* Name.Entity */\n\n\n.ne\n \n{\n \ncolor\n:\n \n#c82829\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Name.Exception */\n\n\n.nf\n \n{\n \ncolor\n:\n \n#4271ae\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Name.Function */\n\n\n.nl\n \n{\n \ncolor\n:\n \n#4d4d4c\n \n}\n \n/* Name.Label */\n\n\n.nn\n \n{\n \ncolor\n:\n \n#4d4d4c\n \n}\n \n/* Name.Namespace */\n\n\n.nx\n \n{\n \ncolor\n:\n \n#4271ae\n \n}\n \n/* Name.Other */\n\n\n.py\n \n{\n \ncolor\n:\n \n#4d4d4c\n \n}\n \n/* Name.Property */\n\n\n.nt\n \n{\n \ncolor\n:\n \n#c82829\n \n}\n \n/* Name.Tag */\n\n\n.nv\n \n{\n \ncolor\n:\n \n#c82829\n \n}\n \n/* Name.Variable */\n\n\n.ow\n \n{\n \ncolor\n:\n \n#3e999f\n \n}\n \n/* Operator.Word */\n\n\n.w\n \n{\n \ncolor\n:\n \n#4d4d4c\n \n}\n \n/* Text.Whitespace */\n\n\n.mb\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal.Number.Bin */\n\n\n.mf\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal.Number.Float */\n\n\n.mh\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal.Number.Hex */\n\n\n.mi\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal.Number.Integer */\n\n\n.mo\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal.Number.Oct */\n\n\n.sb\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Literal.String.Backtick */\n\n\n.sc\n \n{\n \ncolor\n:\n \n#4d4d4c\n \n}\n \n/* Literal.String.Char */\n\n\n.sd\n \n{\n \ncolor\n:\n \n#8e908c\n \n}\n \n/* Literal.String.Doc */\n\n\n.s2\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Literal.String.Double */\n\n\n.se\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal.String.Escape */\n\n\n.sh\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Literal.String.Heredoc */\n\n\n.si\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal.String.Interpol */\n\n\n.sx\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Literal.String.Other */\n\n\n.sr\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Literal.String.Regex */\n\n\n.s1\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Literal.String.Single */\n\n\n.ss\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Literal.String.Symbol */\n\n\n.bp\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Name.Builtin.Pseudo */\n\n\n.vc\n \n{\n \ncolor\n:\n \n#c82829\n \n}\n \n/* Name.Variable.Class */\n\n\n.vg\n \n{\n \ncolor\n:\n \n#c82829\n \n}\n \n/* Name.Variable.Global */\n\n\n.vi\n \n{\n \ncolor\n:\n \n#c82829\n \n}\n \n/* Name.Variable.Instance */\n\n\n.il\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal.Number.Integer.Long */\n\n\n\n\n\n\nSublime Syntax Highlighter\n\n\nMdPopups can also use Sublime\u2019s internal syntax highlighter to highlight your code.  The benefit here is that you get code highlighting in your popup that matches your current theme.  The highlighting ability is dependent upon what syntax packages you have installed in Sublime.  It also depends on whether they are enabled and mapped to a language keyword.  Pull requests are welcome to expand and keep the \nlanguage mapping\n updated.  You can also define in your \nPreferences.sublime-settings\n file additional mappings to either personal syntax files, or while waiting for your mapping changes to be merged and released.  See \nmdpopups.sublime_user_lang_map\n for more info.\n\n\nIn your CSS template it is usually a good idea to generically specify the code wrapper background colors.  With the \nCSS templates\n, this is very easy:\n\n\n.highlight\n,\n \n.inline-highlight\n \n{\n \n{{\n'.background'\n|\ncss\n}}\n \n}\n\n\n\n\n\n\nCSS Styling\n\n\nMdPopups was design to give a universal way of displaying and styling tooltips and phantoms via plugins, but also provide the user an easy way to control the look.\n\n\nMdPopups provides a simple base CSS that styles the basic HTML tags that can be used in the Markdown parser.  On top of that it then parses your current Sublime color scheme and generates CSS that includes styling for all the \nstandard TextMate scopes\n (and only those listed scopes) found in your color scheme.  It then uses those scopes in a default template to highlight your tooltips and phantoms to match your current color scheme.\n\n\nTemplates are used so that a user can easily tap into all the colors, color filters, and other useful logic to control their tooltips and phantoms in one place without having to hard code a specific CSS for a specific color scheme.  Even though a plugin can additionally insert new scopes on demand when calling the popup API, a user can override anything and everything by providing their own \nCSS template\n.  The template is fairly powerful and flexible.\n\n\nCSS Templates\n\n\nMdPoups provides a \nbase.css\n that formats the general look of the HTML elements (padding, size, etc.).  On top of that, it provides a \ndefault.css\n template which applies more superficial styling such as colors, Pygments themes, etc.  It uses the Jinja2 template environment to give direct access to things like color scheme colors, names, and other useful information.  In general, \nbase.css\n and \ndefault.css\n should provide most of what everyone \nneeds\n.  But if you \nwant\n greater control, you can create your own CSS template which MdPopups which will override anything in \nbase.css\n and \ndefault.css\n.\n\n\nAll variables and filters below only apply the CSS, not the content.  The content only receives the variables \nyou\n give it via \ntemplate_vars\n and any options and filters you give it via the \ntemplate_env_options\n.  The css will receive the variables fed in through \ntemplate_vars\n, and in the case of CSS and content, both will place the plugin variables under the object \nplugin\n.\n\n\n\n\nNew 1.13.0\n\n\nUser CSS now overrides \nbase.css\n and \ndefault.css\n instead of replacing \ndefault.css\n.  You can get the same effect as legacy by disabling \ndefault styling\n and creating your own user CSS.\n\n\n\n\nSizes Relative to View\u2019s Font Size\n\n\n\n\nNotice\n\n\nIt is recommended moving forward (starting with mdpopups version 1.8.0 and SublimeText build 3119) to use \nrem\n units for relative sizes.  If you need to dynamically choose whether to use \nrem\n or  not, you can check the template variable \nvar.sublime_version\n.\n\n\n\n\nSizes can be defined relative to the current Sublime file view\u2019s font size.  An example would be ensuring font sizes in a popup or phantom match the size of the font in the Sublime Text file view.  The sizes that can be adjusted are \npt\n, \nem\n, \npx\n.\n\n\n\n\nrelativesize\n\n\n\n\nTakes a relative specifier and inserts the size in the provided unit relative to the font size in the current Sublime Text file view. The filter is applied to a string that consists of a leading relative operator (\n+\n, \n-\n, or \n*\n), a positive number, and one of three size types (\nem\n, \npx\n, or \npt\n). \nrelativesize\n can also take a boolean to turn the the float value into a rounded int.\n\n\n\n\n\n\n\n\nOperator\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n+\n\n\nAdds the specified value to the current font size.\n\n\n\n\n\n\n-\n\n\nSubtracts the specified value from the current font size.\n\n\n\n\n\n\n*\n\n\nMultiplies the value to the current font size. This allows both dividing and multiplying the font size by a given factor.  To cut in half: \n*.5\n.  To double the size \n*2\n.\n\n\n\n\n\n\n\n\nExample\n:\n\n\nh1\n \n{\n \nfont-size\n:\n \n{{\n'+5px'\n|\nrelativesize\n}}\n;\n \n}\n\n\nh2\n \n{\n \nfont-size\n:\n \n{{\n'+4px'\n|\nrelativesize\n}}\n;\n \n}\n\n\nh3\n \n{\n \nfont-size\n:\n \n{{\n'+3px'\n|\nrelativesize\n}}\n;\n \n}\n\n\nh4\n \n{\n \nfont-size\n:\n \n{{\n'+2px'\n|\nrelativesize\n}}\n;\n \n}\n\n\nh5\n \n{\n \nfont-size\n:\n \n{{\n'+1px'\n|\nrelativesize\n}}\n;\n \n}\n\n\nh6\n \n{\n \nfont-size\n:\n \n{{\n'+0px'\n|\nrelativesize\n}}\n;\n \n}\n\n\n\n\n\n\nWould become this (assuming a font size of 19px):\n\n\nh1\n \n{\n \nfont-size\n:\n \n24px\n;\n \n}\n\n\nh2\n \n{\n \nfont-size\n:\n \n23px\n;\n \n}\n\n\nh3\n \n{\n \nfont-size\n:\n \n22px\n;\n \n}\n\n\nh4\n \n{\n \nfont-size\n:\n \n21px\n;\n \n}\n\n\nh5\n \n{\n \nfont-size\n:\n \n20px\n;\n \n}\n\n\nh6\n \n{\n \nfont-size\n:\n \n19px\n;\n \n}\n\n\n\n\n\n\nExample - Integer Rounding\n\n\nul\n,\n \nol\n \n{\n \npadding-left\n:\n \n{{\n'*.5em'\n|\nrelativesize\n(\nTrue\n)\n}}\n;\n \n}\n\n\n\n\n\n\nWould become this (assuming a font size of 19px):\n\n\nul\n,\n \nol\n \n{\n \npadding-left\n:\n \n1em\n;\n \n}\n\n\n\n\n\n\nThe conversion factor between \npx\n, \npt\n, and \nem\n is assummed to be 16px \u2192 1em \u2192 12pt.  Whether this is what sublime is actually doing is another question.  We assume that the Sublime \nfont_size\n setting is in \npx\n as this has given the best overall feel.  \nem\n are not recommened for font sizes as I\u2019ve seen some strange behaviour when scaling \nem\n (even though the numbers seem to calculate correctly).  \nem\n issues may not exists with elements that are not font, but please report any issues you find.\n\n\n\n\nNew 1.7.2\n\n\nInteger rounded added in \n1.7.2\n.  Rounding not supported in old style call from \n1.7.0\n.\n\n\n\n\n\n\nNew 1.7.1\n\n\n1.7.1\n introduced the more simple format of \n{{'+5px'|relativesize}}\n.  It is encouraged to adopt this format instead of \n1.7.0\n format as it will be removed in the future.\n\n\n\n\n\n\nNew 1.7.0\n\n\nAdded in \n1.7.0\n.\n\n\nThis was the \n1.7.0\n format which was cumbersome: \n{{'+5'|relativesize('px')}}\n.  In \n1.7.1\n, it changed, but the old way is still supported.\n\n\n\n\n\n\n\n\nTemplate Colors\n\n\nWith the template environment, colors from the current Sublime color scheme can be accessed and manipulated.  Access to the Sublime color scheme styles are done via the \ncss\n filter.\n\n\n\n\ncss\n\n\n\n\nRetrieves the style for a specific TextMate scope from a Sublime color scheme.  By specifying either \n.foreground\n, \n.background\n, or anyone of the standard TextMate scopes and then paring it with the \ncss\n filter, all the related styles of the specified scope will be inserted into the css document.\n\n\nExample\n:\n\n\nThis:\n\n\nh1\n,\n \nh2\n,\n \nh3\n,\n \nh4\n,\n \nh5\n,\n \nh6\n \n{\n \n{{\n'.comment'\n|\ncss\n}}\n \n}\n\n\n\n\n\n\nMight become this:\n\n\nh1\n,\n \nh2\n,\n \nh3\n,\n \nh4\n,\n \nh5\n,\n \nh6\n \n{\n \ncolor\n:\n \n#888888\n;\n \nfont-style\n:\n \nitalic\n;\n \n}\n\n\n\n\n\n\nNotice that the format of insertion is \nkey: value;\n.  You do not need a semicolon after.  If you add one, you may get multiple semicolons which may break some things.\n\n\nIf you need to get at a specific CSS attribute, you can specify its name in the \ncss\n filter (available attributes are \ncolor\n, \nbackground-color\n, \nfont-style\n, and \nfont-weight\n).\n\n\nThis:\n\n\nh1\n,\n \nh2\n,\n \nh3\n,\n \nh4\n,\n \nh5\n,\n \nh6\n \n{\n \n{{\n'.comment'\n|\ncss\n(\n'color'\n)\n}}\n \n}\n\n\n\n\n\n\nWould then only include the color:\n\n\nh1\n,\n \nh2\n,\n \nh3\n,\n \nh4\n,\n \nh5\n,\n \nh6\n \n{\n \ncolor\n:\n \n#888888\n \n}\n\n\n\n\n\n\nSome scopes might not have colors assigned to them, so multiple scopes can be defined, and the first one that matches will be used:\n\n\n/* If `keyword.operator` is not explicitly used, fallback to `.keyword` */\n\n\nh1\n,\n \nh2\n,\n \nh3\n,\n \nh4\n,\n \nh5\n,\n \nh6\n \n{\n \n{{\n'.keyword.operator, .keyword'\n|\ncss\n(\n'color'\n)\n}}\n \n}\n\n\n\n\n\n\n\n\n\n\nIf desired you can convert a foreground color to a background color or vice versa.  To convert to a foreground color, you can use the \nforeground\n filter.  To convert to a background color, you can use the \nbackground\n filter.\n\n\n\n\nforeground\n\n\n\n\nConvert a background to a foreground.\n\n\nExample\n:\n\n\nbody\n \n{\n \n{{\n'.background'\n|\ncss\n(\n'background-color'\n)|\nforeground\n}}\n \n}\n\n\n\n\n\n\n\n\nbackground\n\n\n\n\nConvert a foreground to a background.\n\n\nExample\n:\n\n\nbody\n \n{\n \n{{\n'.foreground'\n|\ncss\n(\n'color'\n)|\nbackground\n}}\n \n}\n\n\n\n\n\n\n\n\n\n\nTemplate Color Filtering\n\n\nMdPopups also provides a number of color filters within the template environment that can manipulate the colors.  For instance, lets say you had your tooltip in the same color as the view window and it was difficult to see where the tooltip starts and ends.  You can take the color schemes background and apply a brightness filter to it allowing you now see the tooltip clearly.\n\n\nHere we can make the background of the tooltip darker:\n\n\nbody\n \n{\n \n{{\n'.background'\n|\ncss\n(\n'background-color'\n)|\nbrightness\n(\n0.9\n)\n}}\n \n}\n\n\n\n\n\n\nColor filters take a single color attribute of the form \nkey: value;\n.  So when feeding the filter with CSS, it is advised to specify the attribute in the \ncss\n filter to limit the return to only one attribute as shown above; it may be difficult to tell how many attributes \ncss\n could return without explicitly specifying attribute.  Color filters only take either \ncolor\n or \nbackground-color\n attributes.\n\n\nFilters can be chained if more intensity is needed as some filters may clamp the value in one call. Multiple kinds of filters can also be chained together.  These are all the available filters:\n\n\n\n\nbrightness\n\n\n\n\nShifts brightness either dark or lighter. Brightness is relative to 1 where 1 means no change.  Accepted values are floats that are greater than 0.  Ranges are clamped between 0 and 2.\n\n\nExample - Darken\n:\n\n\nbody\n \n{\n \n{{\n'.background'\n|\ncss\n(\n'background-color'\n)|\nbrightness\n(\n0.9\n)\n}}\n \n}\n\n\n\n\n\n\nExample - Lighten\n:\n\n\nbody\n \n{\n \n{{\n'.background'\n|\ncss\n(\n'background-color'\n)|\nbrightness\n(\n1.1\n)\n}}\n \n}\n\n\n\n\n\n\n\n\nsaturation\n\n\n\n\nShifts the saturation either to right (saturate) or the left (desaturate).  Saturation is relative to 1 where 1 means no change.  Accepted values are floats that are greater than 0.  Ranges are clamped between 0 and 2.\n\n\nExample - Desaturate\n:\n\n\nbody\n \n{\n \n{{\n'.background'\n|\ncss\n(\n'background-color'\n)|\nsaturation\n(\n0.9\n)\n}}\n \n}\n\n\n\n\n\n\nExample - Saturate\n:\n\n\nbody\n \n{\n \n{{\n'.background'\n|\ncss\n(\n'background-color'\n)|\nsaturation\n(\n1.1\n)\n}}\n \n}\n\n\n\n\n\n\n\n\ngrayscale\n\n\n\n\nFilters all colors to a grayish tone.\n\n\nExample\n:\n\n\nbody\n \n{\n \n{{\n'.background'\n|\ncss\n(\n'background-color'\n)|\ngrayscale\n}}\n \n}\n\n\n\n\n\n\n\n\nsepia\n\n\n\n\nFilters all colors to a sepia tone.\n\n\nExample\n:\n\n\nbody\n \n{\n \n{{\n'.background'\n|\ncss\n(\n'background-color'\n)|\nsepia\n}}\n \n}\n\n\n\n\n\n\n\n\ninvert\n\n\n\n\nInverts a color.\n\n\nExample\n:\n\n\nbody\n \n{\n \n{{\n'.background'\n|\ncss\n(\n'background-color'\n)|\ninvert\n}}\n \n}\n\n\n\n\n\n\n\n\ncolorize\n\n\n\n\nFilters all colors to a shade of the specified hue.  Think grayscale, but instead of gray, you define a non-gray hue.  The values are angular dimensions starting at the red primary at 0\u00b0, passing through the green primary at 120\u00b0 and the blue primary at 240\u00b0, and then wrapping back to red at 360\u00b0.\n\n\nExample\n:\n\n\nbody\n \n{\n \n{{\n'.background'\n|\ncss\n(\n'background-color'\n)|\ncolorize\n(\n30\n)\n}}\n \n}\n\n\n\n\n\n\n\n\nhue\n\n\n\n\nShifts the current hue either to the left or right.  The values are angular dimensions starting at the red primary at 0\u00b0, passing through the green primary at 120\u00b0 and the blue primary at 240\u00b0, and then wrapping back to red at 360\u00b0.  Values can either be negative to shift left or positive to shift the hue to the right.\n\n\nExample - Left Shift\n:\n\n\nbody\n \n{\n \n{{\n'.background'\n|\ncss\n(\n'background-color'\n)|\nhue\n(-\n30\n)\n}}\n \n}\n\n\n\n\n\n\nExample - Left Right\n:\n\n\nbody\n \n{\n \n{{\n'.background'\n|\ncss\n(\n'background-color'\n)|\nhue\n(\n30\n)\n}}\n \n}\n\n\n\n\n\n\n\n\nfade\n\n\n\n\nFades a color. Essentially it is like apply transparency to the color allowing the color schemes base background color to show through.\n\n\nExample - Fade 50%\n:\n\n\nbody\n \n{\n \n{{\n'.foreground'\n|\ncss\n(\n'color'\n)|\nfade\n(\n0.5\n)\n}}\n \n}\n\n\n\n\n\n\n\n\n\n\nInclude CSS\n\n\nThe template environment allows for retrieving built-in Pygments CSS or retrieving CSS resources from the Sublime Packages.\n\n\n\n\npygments\n\n\n\n\nRetrieve a built-in Pygments color scheme.\n\n\nExample\n:\n\n\n{{\n'native'\n|\npygments\n}}\n\n\n\n\n\n\n\n\ngetcss\n\n\n\n\nRetrieve a CSS file from Sublime\u2019s \nPackages\n folder.  CSS retrieved in this manner can include template variables and filters.\n\n\nExample\n:\n\n\n{{\n'Packages/User/aprosopo-dark.css'\n|\ngetcss\n}}\n\n\n\n\n\n\n\n\n\n\nTemplate Variables\n\n\nThe template environment provides a couple of variables that can be used to conditionally alter the CSS output.  Variables are found under \nvar\n.\n\n\n\n\nvar.sublime_version\n\n\n\n\nsublime_version\n contains the current SublimeText version.  This allows you conditionally handle CSS features that are specific to a SublimeText version.\n\n\nExample\n\n\n{%\n \nif\n \nvar.sublime_version\n \n>=\n \n3119\n \n%}\n\n\npadding\n:\n \n0\n.2rem\n;\n\n\n{%\n \nelse\n \n%}\n\n\npadding\n:\n \n0\n.2em\n;\n\n\n{%\n \nendif\n \n%}\n\n\n\n\n\n\n\n\nNew 1.8.0\n\n\nAdded in \n1.8.0\n.\n\n\n\n\n\n\nvar.mdpopups_version\n\n\n\n\nmdpopups_version\n contains the current mdpopup version which you can use in your CSS templates if needed.\n\n\nExample\n\n\n{%\n \nif\n \nvar.mdpopups_version\n \n>=\n \n(\n1.9\n.0\n)\n \n%}\n\n\n/* do something */\n\n\n{%\n \nelse\n \n%}\n\n\n/* do something else */\n\n\n{%\n \nendif\n \n%}\n\n\n\n\n\n\n\n\nNew 1.9.0\n\n\nAdded in \n1.9.0\n.\n\n\n\n\n\n\nvar.default_formatting\n\n\n\n\nFlag specifying whether default formatting is being used.  See \nmdpopups.default_formatting\n for how to control this flag.  And see \nbase.css\n for an example of how it is used.\n\n\n\n\nNew 1.9.0\n\n\nAdded in \n1.9.0\n.\n\n\n\n\n\n\nvar.default_style\n\n\n\n\nFlag specifying whether default styling is being used.  See \nmdpopups.default_style\n for how to control this flag.  And see \ndefault.css\n for an example of how it is used.\n\n\n\n\nNew 1.13.0\n\n\nAdded in \n1.13.0\n.\n\n\n\n\n\n\nvar.is_dark | var.is_light\n\n\n\n\nis_dark\n checks if the color scheme is a dark color scheme.  Alternatively, \nis_light\n checks if the color scheme is a light color scheme.\n\n\nExample\n:\n\n\n{%\n \nif\n \nvar.is_light\n \n%}\n\n\nhtml\n{\n \n{{\n'.background'\n|\ncss\n(\n'background-color'\n)|\nbrightness\n(\n0.9\n)\n}}\n \n}\n\n\n{%\n \nelse\n \n%}\n\n\nhtml\n{\n \n{{\n'.background'\n|\ncss\n(\n'background-color'\n)|\nbrightness\n(\n1.1\n)\n}}\n \n}\n\n\n{%\n \nendif\n \n%}\n\n\n\n\n\n\n\n\nvar.is_popup | var.is_phantom\n\n\n\n\nis_phantom\n checks if the current CSS is for a phantom instead of a popup.  Alternatively, \nis_popup\n checks if the current use of the CSS is for a popup.\n\n\nExample\n:\n\n\n{%\n \nif\n \nvar.is_phantom\n \n%}\n\n\nhtml\n{\n \n{{\n'.background'\n|\ncss\n(\n'background-color'\n)|\nbrightness\n(\n0.9\n)\n}}\n \n}\n\n\n{%\n \nelse\n \n%}\n\n\nhtml\n{\n \n{{\n'.background'\n|\ncss\n(\n'background-color'\n)|\nbrightness\n(\n1.1\n)\n}}\n \n}\n\n\n{%\n \nendif\n \n%}\n\n\n\n\n\n\n\n\nNew 1.6.0\n\n\nAdded in \n1.6.0\n.\n\n\n\n\n\n\nvar.use_pygments\n\n\n\n\nChecks if the Pygments syntax highlighter is being used.\n\n\nExample\n:\n\n\n{%\n \nif\n \nvar.use_pygments\n \n%}\n\n\n{%\n \nif\n \nvar.is_light\n \n%}\n\n\n{{\n'default'\n|\npygments\n}}\n\n\n{%\n \nelse\n \n%}\n\n\n{{\n'native'\n|\npygments\n}}\n\n\n{%\n \nendif\n \n%}\n\n\n{%\n \nendif\n \n%}\n\n\n\n\n\n\n\n\nvar.color_scheme\n\n\n\n\nRetrieves the current color schemes name.\n\n\nExample\n:\n\n\n{%\n \nif\n \n(\n\n    \nvar.color_scheme\n \nin\n \n(\n\n        \n'Packages/Theme - Aprosopo/Tomorrow-Night-Eighties-Stormy.tmTheme'\n,\n\n        \n'Packages/Theme - Aprosopo/Tomorrow-Morning.tmTheme'\n,\n\n    \n)\n\n\n)\n \n%}\n\n\na\n \n{\n \n{{\n'.keyword.operator'\n|\ncss\n(\n'color'\n)\n}}\n \n}\n\n\n{%\n \nelse\n \n%}\n\n\na\n \n{\n \n{{\n'.support.function'\n|\ncss\n(\n'color'\n)\n}}\n \n}\n\n\n{%\n \nendif\n \n%}",
            "title": "User Guide"
        },
        {
            "location": "/usage/#user-guide",
            "text": "Using and configuring Sublime Markdown Popups.",
            "title": "User Guide"
        },
        {
            "location": "/usage/#dependencies",
            "text": "Your plugin must include the following Package Control dependencies:  { \n     \"*\" :   { \n         \">=3080\" :   [ \n             \"pygments\" , \n             \"python-markdown\" , \n             \"mdpopups\" , \n             \"python-jinja2\" , \n             \"markupsafe\" \n         ] \n     }  }",
            "title": "Dependencies"
        },
        {
            "location": "/usage/#markdown-support",
            "text": "MdPopups uses  Python Markdown  to parse Markdown and transform it into a tooltip or a phantom (HTML embedded in your file view).  The Markdown environment supports basic Markdown features, but also includes a number of specialty extensions to enhance the environment.  To keep the experience standardized for plugin use, tweaking the Markdown settings is not allowed except for  nl2br  as it is not critical and can actually get in the way of formatting the Markdown if not desired.  MdPopups includes the following Python Markdown extensions:   attr_list  allows you to add HTML attributes to block and inline elements easily.  nl2br  turns new lines int  < br >  tags.  def_list  adds support for definition lists.  admonition  provides admonition blocks.  codehilite  provides syntax highlighted blocks.   MdPopups also includes a couple of 3 rd  party extensions (some of which have been modified to work better in the Sublime Text environment).   superfences  provides support for nested fenced blocks. UML support is disabled.  betterem  is extension that aims to improve emphasis support in Python Markdown. MdPopups leaves it configured in its default state where underscores are handled intelligently:  _handled_intelligently_  \u2192  handled_intelligently .  Asterisks can be used to do mid word emphasis:  em*pha*sis  \u2192 em pha sis.  magiclink  auto links HTML links.  inlinehilite  allows for inline code highlighting:  `#!python import module`  \u2192  import   module .  extrarawhtml  allows you to add  markdown=\"1\"  to block html elements to allow content under them to be parsed with Python markdown (inline tags should already have their content parsed).  All this module does is expose this specific functionality from the  Python Markdown\u2019s Extra extension  as this functionality could not be enabled without including all of the  Extra  extensions other features.  You can read the Python Markdown\u2019s Extra extension documentation to learn more about this feature.    New 1.10.0  extrarawhtml  was added.    New 1.9.0  nl2br  can be turned off via the  nl2br  parameter in  show_popup ,  add_phantom ,  update_popup ,  md2html , and  Phantom .",
            "title": "Markdown Support"
        },
        {
            "location": "/usage/#api-usage",
            "text": "MdPopups provides a number of accessible functions.   Developer Guidelines  Plugin developers should not try to override the style of existing base classes and elements with plugin injection, but they should use custom plugin classes so that only the specific special elements that must be handled uniquely for the plugin get targeted.  You should use very unique class names (preferably with the plugin\u2019s name as part of the class). This way a user can target and override your class styling if desired. There are a couple of ways to approach this.    For Sublime Text 3119+, it is advised to use the  wrapper_class  option of the  show_popup ,  update_popup , and  add_phantom  commands to wrap your content in a div with the provided class.  That way the developer can provide CSS to style their specific elements via  .mdpopups   .myplugin-wrapper   .myclass   {}  or simply  .myplugin-wrapper   .myclass   {} . This is one of the easiest ways, but it is for 3119+ only.    For Sublime Text <3119, when injecting your own CSS classes from a plugin, wrapper classes won\u2019t work as Sublime didn\u2019t add CSS support for parent child classes until later. In this case, it is recommend you namespace your classes by appending the plugin name as a prefix so it can be targeted like this:  .myplugin-myclass   {} .  This will give your elements very unique classes that the user can target and override if they choose.    To add classes to inline and some block markdown elements you can use the Python Markdown  attr_list extension syntax .  This will work on inline elements and a number of block elements (though sometimes it can be difficult to target certain kinds of block elements).  If all else fails, you can insert raw HTML into your markdown and apply classes directly to the element.",
            "title": "API Usage"
        },
        {
            "location": "/usage/#version",
            "text": "(int,) mdpopups.version  Get the version of the MdPopups library.  Returns a tuple of integers which represents the major, minor, and patch version.",
            "title": "version"
        },
        {
            "location": "/usage/#show_popup",
            "text": "mdpopups.show_popup   Accepts Markdown and creates a Sublime popup tooltip.  By default, the Pygments syntax highlighter will be used for code highlighting.  Set  mdpopups.use_sublime_highlighter  to  true  in your  Preferences.sublime-settings  file if you would like to use the Sublime syntax highlighter.     Parameter  Type  Required  Default  Description      view  sublime.View  Yes   A Sublime Text view object.    content  string  Yes   Markdown/HTML content to be used to create a tooltip.    md  bool  No  True  Defines whether the content is Markdown and needs to be converterted.    css  string  No  None  Additional CSS that will be injected.    flags  int  No  0  Flags to pass down to the Sublime Text  view.show_popup  call.    location  int  No  -1  Location to show popup in view.  -1 means to show right under the first cursor.    max_width  int  No  320  Maximum width of the popup.    max_height  int  No  240  Maximum height of the popup.    on_navigate  function  No  None  Callback that receives one variable  href .    on_hide  function  No  None  Callback for when the tooltip is hidden.    wrapper_class  string  No  None  A string containing the class name you wish wrap your content in.  A  div  will be created with the given class.    template_vars  dict  No  None  A dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content.    template_env_options  dict  No  None  A dictionary containing options for the Jinja2 template environment. This  only  applies to the  HTML/Markdown  content. Content plugin vars are found under the object:  plugin .    nl2br  bool  No  True  Determines whether the newline to br Python Markdown extension is enabled or not.      New 1.9.0  wrapper_class ,  template_vars ,  template_env_options , and  nl2br  option added in  1.9.0 .",
            "title": "show_popup"
        },
        {
            "location": "/usage/#update_popup",
            "text": "mdpopups.update_popup   Updates the current existing popup.  Set  mdpopups.use_sublime_highlighter  to  true  in your  Preferences.sublime-settings  file if you would like to use the Sublime syntax highlighter.     Parameter  Type  Required  Default  Description      view  sublime.View  Yes   A Sublime Text view object.    content  string  Yes   Markdown/HTML content to be used to create a tooltip.    md  bool  No  True  Defines whether the content is Markdown and needs to be converterted.    css  string  No  None  CSS text that should be used instead of loading a theme.    wrapper_class  string  No  None  A string containing the class name you wish wrap your content in.  A  div  will be created with the given class.    template_vars  dict  No  None  A dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content.    template_env_options  dict  No  None  A dictionary containing options for the Jinja2 template environment. This  only  applies to the  HTML/Markdown  content. Content plugin vars are found under the object:  plugin .    nl2br  bool  No  True  Determines whether the newline to br Python Markdown extension is enabled or not.      New 1.9.0  wrapper_class ,  template_vars ,  template_env_options , and  nl2br  option added in  1.9.0 .",
            "title": "update_popup"
        },
        {
            "location": "/usage/#hide_popup",
            "text": "mdpopups.hide_popup   Hides the current popup.  Included for convenience and consistency.     Parameter  Type  Required  Default  Description      view  sublime.View  Yes   A Sublime Text view object.",
            "title": "hide_popup"
        },
        {
            "location": "/usage/#is_popup_visible",
            "text": "bool mdpopups.is_popup_visible   Checks if popup is visible in the view. Included for convenience and consistency.     Parameter  Type  Required  Default  Description      view  sublime.View  Yes   A Sublime Text view object.      New 1.6.0  Feature added in  1.6.0 .",
            "title": "is_popup_visible"
        },
        {
            "location": "/usage/#add_phantom",
            "text": "int mdpopups.add_phantom   Adds a phantom (embedded HTML in the file view) and returns the phantom id.  Returns an integer. \nAccepts Markdown and creates a Sublime phantom (embedded HTML in the file view).  By default, the Pygments syntax highlighter will be used for code highlighting.  Set  mdpopups.use_sublime_highlighter  to  true  in your  Preferences.sublime-settings  file if you would like to use the Sublime syntax highlighter.  On completion of the phantom, the function will return the phantom id which is an integer.     Parameter  Type  Required  Default  Description      view  sublime.View  Yes   A Sublime Text view object.    key  string  Yes   A key that is associated with the given phantom.  Multiple phantoms can share the same key, but each phantom will have its own id.    region  sublime.Region  Yes   Region in the view where the phantom should be inserted.    content  string  Yes   Markdown/HTML content to be used to create a phantom.    layout  int  Yes   How the HTML content should be inserted.  Acceptable values are:  sublime.LAYOUT_INLINE ,  sublime.LAYOUT_BLOCK , and  sublime.LAYOUT_BELOW .    md  bool  No  True  Defines whether the content is Markdown and needs to be converterted.    css  string  No  None  Additional CSS that will be injected.    on_navigate  function  No  None  Callback that receives one variable  href .    wrapper_class  string  No  None  A string containing the class name you wish wrap your content in.  A  div  will be created with the given class.    template_vars  dict  No  None  A dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content.    template_env_options  dict  No  None  A dictionary containing options for the Jinja2 template environment. This  only  applies to the  HTML/Markdown  content. Content plugin vars are found under the object:  plugin .    nl2br  bool  No  True  Determines whether the newline to br Python Markdown extension is enabled or not.      New 1.9.0  wrapper_class ,  template_vars ,  template_env_options , and  nl2br  option added in  1.9.0 .    New 1.6.0  Feature added in  1.6.0 .",
            "title": "add_phantom"
        },
        {
            "location": "/usage/#erase_phantoms",
            "text": "mdpopups.erase_phantoms   Erase all phantoms associated to the given key.  Included for convenience and consistency.     Parameter  Type  Required  Default  Description      view  sublime.View  Yes   A Sublime Text view object.    key  string  Yes   A key that is associated with phantoms.  Multiple phantoms can share the same key, but each phantom will have its own id.      New 1.6.0  Feature added in  1.6.0 .",
            "title": "erase_phantoms"
        },
        {
            "location": "/usage/#erase_phantom_by_id",
            "text": "mdpopups.erase_phantom_by_id   Erase a single phantom by passing its id.  Included for convenience and consistency.     Parameter  Type  Required  Default  Description      view  sublime.View  Yes   A Sublime Text view object.    pid  string  Yes   The id associated with a single phantom.  Multiple phantoms can share the same key, but each phantom will have its own id.      New 1.6.0  Feature dded in  1.6.0 .",
            "title": "erase_phantom_by_id"
        },
        {
            "location": "/usage/#query_phantom",
            "text": "[sublime.Region] mdpopups.query_phantom   Query the location of a phantom by specifying its id.  A list of  sublime.Region s will be returned.  If the phantom with the given id is not found, the region will be returned with positions of  (-1, -1) .  Included for convenience and consistency.     Parameter  Type  Required  Default  Description      view  sublime.View  Yes   A Sublime Text view object.    pid  int  Yes   The id associated with a single phantom.  Multiple phantoms can share the same key, but each phantom will have its own id.      New 1.6.0  Feature added in  1.6.0 .",
            "title": "query_phantom"
        },
        {
            "location": "/usage/#query_phantoms",
            "text": "[sublime.Region] mdpopups.query_phantoms   Query the location of multiple phantoms by specifying their ids.  A list of  sublime.Region s will be returned where each index corresponds to the index of ids that was passed in.  If a given phantom id is not found, that region will be returned with positions of  (-1, -1) .  Included for convenience and consistency.     Parameter  Type  Required  Default  Description      view  sublime.View  Yes   A Sublime Text view object.    pids  [int]  Yes   The id associated with a single phantom.  Multiple phantoms can share the same key, but each phantom will have its own id.      New 1.6.0  Feature added in  1.6.0 .",
            "title": "query_phantoms"
        },
        {
            "location": "/usage/#class-phantom",
            "text": "mdpopups.Phantoms   A phantom object for use with  PhantomSet .     Parameter  Type  Required  Default  Description      region  sublime.Region  Yes   Region in the view where the phantom should be inserted.    content  string  Yes   Markdown/HTML content to be used to create a phantom.    layout  int  Yes   How the HTML content should be inserted.  Acceptable values are:  sublime.LAYOUT_INLINE ,  sublime.LAYOUT_BLOCK , and  sublime.LAYOUT_BELOW .    md  bool  No  True  Defines whether the content is Markdown and needs to be converterted.    css  string  No  None  Additional CSS that will be injected.    on_navigate  function  No  None  Callback that receives one variable  href .    wrapper_class  string  No  None  A string containing the class name you wish wrap your content in.  A  div  will be created with the given class.    template_vars  dict  No  None  A dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content.    template_env_options  dict  No  None  A dictionary containing options for the Jinja2 template environment. This  only  applies to the  HTML/Markdown  content. Content plugin vars are found under the object:  plugin .    nl2br  bool  No  True  Determines whether the newline to br Python Markdown extension is enabled or not.     Attributes     Attribute  Type  Description      region  sublime.Region  Region in the view where the phantom should be inserted.    content  string  Markdown/HTML content to be used to create a phantom.    layout  int  How the HTML content should be inserted.  Acceptable values are:  sublime.LAYOUT_INLINE ,  sublime.LAYOUT_BLOCK , and  sublime.LAYOUT_BELOW .    md  bool  Defines whether the content is Markdown and needs to be converterted.    css  string  Additional CSS that will be injected.    on_navigate  function  Callback that receives one variable  href .    wrapper_class  string  A string containing the class name you wish wrap your content in.  A  div  will be created with the given class.    template_vars  dict  A dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content.    template_env_options  dict  A dictionary containing options for the Jinja2 template environment. This  only  applies to the  HTML/Markdown  content. Content plugin vars are found under the object:  plugin .    nl2br  bool  Determines whether the newline to br Python Markdown extension is enabled or not.      New 1.9.0  wrapper_class ,  template_vars ,  template_env_options , and  nl2br  option added in  1.9.0 .    New 1.6.1  Feature added in  1.6.1 .",
            "title": "class Phantom"
        },
        {
            "location": "/usage/#class-phantomset",
            "text": "mdpopups.PhantomSet   A class that allows you to update phantoms under the specified key.     Parameter  Type  Required  Default  Description      view  sublime.View  Yes   A Sublime Text view object.    key  string  Yes   The key that should be associated with all related phantoms in the set.     Methods   mdpopups.PhantomSet.update   Update all the phantoms in the set with the given phantom list.     Parameter  Type  Required  Default  Description      new_phantoms  [ mdpopups.Phantom ]  Yes   A list of mdpopup phantoms.  sublime.Phantom  will be converted to  mdpopups.Phantom .        New 1.6.1  Feature added in  1.6.1 .",
            "title": "class PhantomSet"
        },
        {
            "location": "/usage/#clear_cache",
            "text": "mdpopups.clear_cache  Clears the CSS theme related caches.",
            "title": "clear_cache"
        },
        {
            "location": "/usage/#md2html",
            "text": "mdpopups.md2html   Exposes the Markdown to HTML converter in case it is desired to parse only a section of markdown.  This works well for someone who wants to work directly in HTML, but might want to still have fragments of markdown that they would like to occasionally convert. Code highlighting will use either Pygments or the native Sublime syntax highlighter.  Set  mdpopups.use_sublime_highlighter  to  true  if you want to use the Sublime syntax highlighter.     Parameter  Type  Required  Default  Description      view  sublime.View  Yes   Sublime text View object.    markup  string  Yes   The markup code to be converted.    template_vars  dict  No  None  A dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content.    template_env_options  dict  No  None  A dictionary containing options for the Jinja2 template environment. This  only  applies to the  HTML/Markdown  content. Content plugin vars are found under the object:  plugin .    nl2br  bool  No  True  Determines whether the newline to br Python Markdown extension is enabled or not.      New 1.9.0  template_vars ,  template_env_options , and  nl2br  option added in  1.9.0 .",
            "title": "md2html"
        },
        {
            "location": "/usage/#color_box",
            "text": "string mdpopups.color_box   Generates a color preview box image encoded in base64 and formated to be inserted right in your your Markdown or HTML code as an  img  tag.     Parameter  Type  Required  Default  Description      colors  [string]  Yes   A list of color strings formatted as  #RRGGBBAA  where  R  is the red channel,  G  is the green channel,  B  is the blue channel, and  A  is the alpha channel.    border  string  Yes   The color for the color box border.  Input is a RGB color formatted as  #RRGGBB .    border2  string  No  None  The optional secondary border color.  This is great if you are going to have it on a light and dark backgrounds.  You can use a double border so the color stands out regardless of the background.  Input is a RGB color formatted as  #RRGGBB .    height  int  No  32  Height of color box.    width  int  No  32  Width of color box.    border_size  int  No  1  Width of the color box border.  If using  border2 , the value should be set to at least 2 to see both colors.    check_size  int  No  4  Size of checkered box squares used for the background of transparent colors.    max_colors  int  No  5  Max number of colors that will be evaluated in the  colors  parameter.  Multiple colors are used to to create palette boxes showing multiple colors lined up horizontally.    alpha  bool  No  False  Will create color box images with a real alpha channel instead of simulating one with a checkered background.    border_map  int  No  0xF  A mapping of which borders to show.  Where  0x1  is  TOP ,  0x2  is  LEFT ,  0x4  is  BOTTOM ,  0x8  is  RIGHT .  Map flags can be accessed via  mdpopups.colorbox.TOP  etc.",
            "title": "color_box"
        },
        {
            "location": "/usage/#color_box_raw",
            "text": "bytes mdpopups.color_box   Generates a color preview box image and returns the raw byte string of the image.     Parameter  Type  Required  Default  Description      colors  [string]  Yes   A list of color strings formatted as  #RRGGBBAA  where  R  is the red channel,  G  is the green channel,  B  is the blue channel, and  A  is the alpha channel.    border  string  Yes   The color for the color box border.  Input is a RGB color formatted as  #RRGGBB .    border2  string  No  None  The optional secondary border color.  This is great if you are going to have it on a light and dark backgrounds.  You can use a double border so the color stands out regardless of the background.  Input is a RGB color formatted as  #RRGGBB .    height  int  No  32  Height of color box.    width  int  No  32  Width of color box.    border_size  int  No  1  Width of the color box border.  If using  border2 , the value should be set to at least 2 to see both colors.    check_size  int  No  4  Size of checkered box squares used for the background of transparent colors.    max_colors  int  No  5  Max number of colors that will be evaluated in the  colors  parameter.  Multiple colors are used to to create palette boxes showing multiple colors lined up horizontally.    alpha  bool  No  False  Will create color box images with a real alpha channel instead of simulating one with a checkered background.    border_map  int  No  0xF  A mapping of which borders to show.  Where  0x1  is  TOP ,  0x2  is  LEFT ,  0x4  is  BOTTOM ,  0x8  is  RIGHT .  Map flags can be accessed via  mdpopups.colorbox.TOP  etc.      New 1.7.0  Feature dded in  1.7.0 .",
            "title": "color_box_raw"
        },
        {
            "location": "/usage/#tint",
            "text": "string mdpopups.tint   Takes a either a path to an png or a byte string of a png and tints it with a specific color and returns a string containing the base64 encoded png in an HTML element.     Parameter  Type  Required  Default  Description      img  string/bytes  Yes   Either a string in the form  Packages/Package/resource.png  or a byte string of a png image.    color  string  Yes   A string in the form of  #RRGGBB  or  #RRGGBBAA  (alpha layer will be stripped and ignored and is only allowed to make it easy to pass in colors from a color scheme).    opacity  int  No  255  An integer value between 0 - 255 that specifies the opacity of the tint.    height  int  No  None  Height that should be specified in the return HTML element.    width  int  No  None  Width that should be specified in the return HTML element.      New 1.7.0  Feature added in  1.7.0 .",
            "title": "tint"
        },
        {
            "location": "/usage/#tint_raw",
            "text": "bytes mdpopups.tint_raw   Takes a either a path to an png or a byte string of a png and tints it with a specific color and returns a byte string of the modified png.     Parameter  Type  Required  Default  Description      img  string/bytes  Yes   Either a string in the form  Packages/Package/resource.png  or a byte string of a png image.    color  string  Yes   A string in the form of  #RRGGBB  or  #RRGGBBAA  (alpha layer will be stripped and ignored and is only allowed to make it easy to pass in colors from a color scheme).    opacity  int  No  255  An integer value between 0 - 255 that specifies the opacity of the tint.      New 1.7.0  Feature added in  1.7.0 .",
            "title": "tint_raw"
        },
        {
            "location": "/usage/#scope2style",
            "text": "dict mdpopups.scope2style   Takes a sublime scope (complexity doesn\u2019t matter), and guesses the style that would be applied.  While there may be untested corner cases with complex scopes where it fails, in general, it is usually accurate.  The returned dictionary is in the form:  { \n     # Colors will be None if not found, \n     # though usually, even if the scope has no color \n     # it will return the overall theme foreground. \n     # \n     # Background might be None if using `explicit_background` \n     # as it only returns a background if that style specifically \n     # defines a background. \n     \"color\" :   \"#RRGGBB\" , \n     \"background\" :   \"#RRGGBB\" , \n     # Style will usually be either 'bold', 'italic'. \n     # Multiple styles may be returned 'bold italic' or an empty string ''. \n     \"style\" :   'bold italic'  }      Parameter  Type  Required  Default  Description      view  sublime.View  Yes   Sublime text View object so that the correct color scheme will be searched.    scope  string  Yes   The scope to search for.    selected  bool  No  False  Whether this scope is in a selected state (selected text).    explicit_background  bool  No  False  Only return a background if one is explicitly defined in the color scheme.      New 1.7.0  Feature added in  1.7.0 .",
            "title": "scope2style"
        },
        {
            "location": "/usage/#syntax_highlight",
            "text": "mdpopups.syntax_highlight   Allows for syntax highlighting outside the Markdown environment.  You can just feed it code directly and give it the language of your choice, and you will be returned a block of HTML that has been syntax highlighted.  This does not have to be in markdown format.  Just give it plain text to convert to highlighted HTML.  syntax_highlight  will use either Pygments or the native Sublime syntax highlighter.  Set  mdpopups.use_sublime_highlighter  to  true  if you want to use the Sublime syntax highlighter.     Parameter  Type  Required  Default  Description      view  sublime.View  Yes   Sublime text View object.    src  string  Yes   The source code to be converted.  No  ```  needed.    language  string  No  None  Specifies the language to highlight as.    inline  bool  No  False  Will return the code formatted for inline display.",
            "title": "syntax_highlight"
        },
        {
            "location": "/usage/#get_language_from_view",
            "text": "mdpopups.get_language_from_view   Allows a user to extract the equivalent language specifier for  mdpopups.syntax_highlight  from a view.  If the language cannot be determined,  None  will be returned.     Parameter  Type  Required  Default  Description      view  sublime.View  Yes   Sublime text View object.",
            "title": "get_language_from_view"
        },
        {
            "location": "/usage/#global-user-settings",
            "text": "All settings for  MdPopups  are placed in Sublime\u2019s  Preferences.sublime-settings .  They are global and work no for whatever plugin uses the MdPopups API.",
            "title": "Global User Settings"
        },
        {
            "location": "/usage/#mdpopupsdebug",
            "text": "Turns on debug mode.  This will dump out all sorts of info to the console.  Content before parsing to HTML, final HTML output, traceback from failures, etc..  This is more useful for plugin developers.  It works by specifying an error level.   0  or  false  would disable it.  1 would trigger on errors. 2 would trigger on warnings and any level below.  3 would be general info (like HTML output) and any level below.       \"mdpopups.debug\" :   1 ,",
            "title": "mdpopups.debug"
        },
        {
            "location": "/usage/#mdpopupsdisable",
            "text": "Global kill switch to prevent popups (created by MdPopups) from appearing.       \"mdpopups.disable\" :   true ,",
            "title": "mdpopups.disable"
        },
        {
            "location": "/usage/#mdpopupscache_refresh_time",
            "text": "Control how long a CSS theme file will be in the cache before being refreshed.  Value should be a positive integer greater than 0.  Units are in minutes.  Default is 30.       \"mdpopups.cache_refresh_time\" :   30 ,",
            "title": "mdpopups.cache_refresh_time"
        },
        {
            "location": "/usage/#mdpopupscache_limit",
            "text": "Control how many CSS theme files will be kept in cache at any given time.  Value should be a positive integer greater than or equal to 0.       \"mdpopups.cache_limit\" :   10",
            "title": "mdpopups.cache_limit"
        },
        {
            "location": "/usage/#mdpopupsuse_sublime_highlighter",
            "text": "Controls whether the Pygments or the native Sublime syntax highlighter is used for code highlighting.  This affects code highlighting in Markdown conversion] via and when  md2html  and when code is directly processed using  syntax_highlight . To learn more about the syntax highlighter see  Syntax Highlighting .       \"mdpopups.use_sublime_highlighter\" :   true",
            "title": "mdpopups.use_sublime_highlighter"
        },
        {
            "location": "/usage/#mdpopupsuser_css",
            "text": "Overrides the default CSS theme.  Value should be a relative path pointing to the CSS theme file:  Packages/User/my_custom_theme.css .  Slashes should be forward slashes. By default, it will point to  Packages/User/mdpopups.css .  User CSS overrides all CSS: base, default, plugin, etc.       \"mdpopups.use_sublime_highlighter\" :   \"Packages/User/mdpopups.css\"",
            "title": "mdpopups.user_css"
        },
        {
            "location": "/usage/#mdpopupsdefault_formatting",
            "text": "Controls whether mdpopups default formatting (contained in  base.css ) will be applied or not.   New 1.9.0 Added in  1.9.0 .",
            "title": "mdpopups.default_formatting"
        },
        {
            "location": "/usage/#mdpopupsdefault_style",
            "text": "Controls whether mdpopups default styling (contained in  default.css ) will be applied or not.   New 1.13.0 Added in  1.13.0 .",
            "title": "mdpopups.default_style"
        },
        {
            "location": "/usage/#mdpopupssublime_user_lang_map",
            "text": "This is a special setting allowing the mapping of personal syntax languages which are not yet included or will not be included in the official mapping table.  You can either define your own new entry, or use the name of an existing entry to extend language keywords or syntax languages.  When extending, user keywords and languages will be cycled through first.       'mdpopups.sublime_user_lang_map' :   { \n         \"language\" :   (( 'keywords' ,),   ( 'MyPackage/MySyntaxLanguage' )) \n     }   Example :  'mdpopups.sublime_user_lang_map' :   { \n     'javascript' :   (( 'javascript' ,   'js' ),   ( 'JavaScript/JavaScript' ,   'JavaScriptNext - ES6 Syntax/JavaScriptNext' ))  }    For a list of all currently supported syntax mappings, see the official  mapping file .",
            "title": "mdpopups.sublime_user_lang_map"
        },
        {
            "location": "/usage/#mdpopupsfont_scale",
            "text": "Sublime currently doesn\u2019t account for font scaling.  For example, if you have a 4K monitor on Windows, and you set the OS font scaling to 125% in your system settings, all your font sizes in your popups and phantoms will be approximately 25% too small.  This feature aims to fix this.  By default, mdpopups will try to guess the scaling on Windows, but it can only guess on Windows currently.  If you don\u2019t like what it guesses, or you are on Linux or OSX, you can specify a scale here.  All sizes that are run through the  relativesize  filter use the size of the  font_size  variable found in the a file view\u2019s settings as the reference.  It seems that this value is closest to a  px  font size.   mdpopups.font_scale  will only be applied to sizes run through the  relativesize  filter, and I personally recommend using  px  for fonts (or maybe even  pt  as they seemed all right, but I\u2019ve seen funny things when using  em  sizes even though seem to calculate fine).  Value should be a positive integer or float.  The default value is  0 . On Windows, if you set it to  0 , it will guess your font scale.  Setting this value to  1  effectively disables it and since you are using a scale of one, no adjustments are made.  On Linux and OSX, either  0  or  1  effectively disables the feature.  So if your OS font scaling is set to 125%, you would probably want to set the scale factor to  1.25  to increase your popup/phantom font sizes to 125% from its calculated 100%.  'mdpopups.font_scale' :   0 ,",
            "title": "mdpopups.font_scale"
        },
        {
            "location": "/usage/#syntax-highlighting",
            "text": "MdPopups has two syntax highlighting methods: one is Pygments, the other is Sublimes native syntax highlighters.  When developing a plugin, it is wise to test out both as a syntax mapping may be needed for the Sublime Syntax Highlighter; mappings can be added locally and/or to the main repository via pull requests.",
            "title": "Syntax Highlighting"
        },
        {
            "location": "/usage/#pygments",
            "text": "Note  Sublime Text 3119 allows for parent and child class in the form  .class1   .class2 .  If you are on 3119 or later, Pygments class will be formatted as  .mdpopups   .highight   .class ,   .mdpopups   .inline-highlight   .class .  Keep this in mind as you are reading.  The main thing you need to know is that you can customize the background and/or main font color by using the following for ST 3119+:  .mdpopups   .highlight ,   .mdpopups   .inline-highlight   {   background-color :   #f8f8f8 ;   color :   #4d4d4c   }   On ST < 3119, you cannot use the parent and child classes, so the CSS is limited:  .highlight ,   .inline-highlight   {   background-color :   #f8f8f8 ;   color :   #4d4d4c   }    Pygments has a great variety of highlighters out of the box.  It also comes with a number of built-in color schemes that can be used.  Pygments themes are loaded up using the  CSS template .  You can either specify an existing one, paste your own in.  Due to the limitations of the Sublime HTML and CSS engine, you must format your personal Pygments them to work well.  Traditionally Pygments CSS classes are given not only syntax classes applied to each span, but an overall class as assigned to a div wrapper as well.  For instance, a class for whitespace may look like this (where  .highlight  is the div wrapper\u2019s class and  .w  i the span\u2019s class):  .highlight   .w   {   color :   #cccccc   }   /* Text.Whitespace */   But the sublime CSS engine doesn\u2019t support parent and child classes like  .highlight   .w ; it supports either single or multiple classes on one element like  .class1.class2 .  Because of this, the  .highlight  class must be stripped out.  .w   {   color :   #cccccc   }   /* Text.Whitespace */   MdPopups also needs both classes  .highlgiht  and  .inline-highlight  to be styled with the foreground and background color:  .highlight ,   .inline-highlight   {   background-color :   #f8f8f8 ;   color :   #4d4d4c   }   Full Example :  .highlight ,   .inline-highlight   {   background-color :   #f8f8f8 ;   color :   #4d4d4c   }  .c   {   color :   #8e908c ;   font-style :   italic   }   /* Comment */  .err   {   color :   #c82829   }   /* Error */  .k   {   color :   #8959a8 ;   font-weight :   bold   }   /* Keyword */  .l   {   color :   #f5871f   }   /* Literal */  .n   {   color :   #4d4d4c   }   /* Name */  .o   {   color :   #3e999f   }   /* Operator */  .p   {   color :   #4d4d4c   }   /* Punctuation */  .cm   {   color :   #8e908c ;   font-style :   italic   }   /* Comment.Multiline */  .cp   {   color :   #8e908c ;   font-weight :   bold   }   /* Comment.Preproc */  .c1   {   color :   #8e908c ;   font-style :   italic   }   /* Comment.Single */  .cs   {   color :   #8e908c ;   font-style :   italic   }   /* Comment.Special */  .gd   {   color :   #c82829   }   /* Generic.Deleted */  .ge   {   font-style :   italic   }   /* Generic.Emph */  .gh   {   color :   #4d4d4c ;   font-weight :   bold   }   /* Generic.Heading */  .gi   {   color :   #718c00   }   /* Generic.Inserted */  .gp   {   color :   #8e908c ;   font-weight :   bold   }   /* Generic.Prompt */  .gs   {   font-weight :   bold   }   /* Generic.Strong */  .gu   {   color :   #3e999f ;   font-weight :   bold   }   /* Generic.Subheading */  .kc   {   color :   #8959a8 ;   font-weight :   bold   }   /* Keyword.Constant */  .kd   {   color :   #8959a8 ;   font-weight :   bold   }   /* Keyword.Declaration */  .kn   {   color :   #8959a8 ;   font-weight :   bold   }   /* Keyword.Namespace */  .kp   {   color :   #8959a8 ;   font-weight :   bold   }   /* Keyword.Pseudo */  .kr   {   color :   #8959a8 ;   font-weight :   bold   }   /* Keyword.Reserved */  .kt   {   color :   #eab700 ;   font-weight :   bold   }   /* Keyword.Type */  .ld   {   color :   #718c00   }   /* Literal.Date */  .m   {   color :   #f5871f   }   /* Literal.Number */  .s   {   color :   #718c00   }   /* Literal.String */  .na   {   color :   #4271ae   }   /* Name.Attribute */  .nb   {   color :   #4271ae   }   /* Name.Builtin */  .nc   {   color :   #c82829 ;   font-weight :   bold   }   /* Name.Class */  .no   {   color :   #c82829   }   /* Name.Constant */  .nd   {   color :   #3e999f   }   /* Name.Decorator */  .ni   {   color :   #4d4d4c   }   /* Name.Entity */  .ne   {   color :   #c82829 ;   font-weight :   bold   }   /* Name.Exception */  .nf   {   color :   #4271ae ;   font-weight :   bold   }   /* Name.Function */  .nl   {   color :   #4d4d4c   }   /* Name.Label */  .nn   {   color :   #4d4d4c   }   /* Name.Namespace */  .nx   {   color :   #4271ae   }   /* Name.Other */  .py   {   color :   #4d4d4c   }   /* Name.Property */  .nt   {   color :   #c82829   }   /* Name.Tag */  .nv   {   color :   #c82829   }   /* Name.Variable */  .ow   {   color :   #3e999f   }   /* Operator.Word */  .w   {   color :   #4d4d4c   }   /* Text.Whitespace */  .mb   {   color :   #f5871f   }   /* Literal.Number.Bin */  .mf   {   color :   #f5871f   }   /* Literal.Number.Float */  .mh   {   color :   #f5871f   }   /* Literal.Number.Hex */  .mi   {   color :   #f5871f   }   /* Literal.Number.Integer */  .mo   {   color :   #f5871f   }   /* Literal.Number.Oct */  .sb   {   color :   #718c00   }   /* Literal.String.Backtick */  .sc   {   color :   #4d4d4c   }   /* Literal.String.Char */  .sd   {   color :   #8e908c   }   /* Literal.String.Doc */  .s2   {   color :   #718c00   }   /* Literal.String.Double */  .se   {   color :   #f5871f   }   /* Literal.String.Escape */  .sh   {   color :   #718c00   }   /* Literal.String.Heredoc */  .si   {   color :   #f5871f   }   /* Literal.String.Interpol */  .sx   {   color :   #718c00   }   /* Literal.String.Other */  .sr   {   color :   #718c00   }   /* Literal.String.Regex */  .s1   {   color :   #718c00   }   /* Literal.String.Single */  .ss   {   color :   #718c00   }   /* Literal.String.Symbol */  .bp   {   color :   #f5871f   }   /* Name.Builtin.Pseudo */  .vc   {   color :   #c82829   }   /* Name.Variable.Class */  .vg   {   color :   #c82829   }   /* Name.Variable.Global */  .vi   {   color :   #c82829   }   /* Name.Variable.Instance */  .il   {   color :   #f5871f   }   /* Literal.Number.Integer.Long */",
            "title": "Pygments"
        },
        {
            "location": "/usage/#sublime-syntax-highlighter",
            "text": "MdPopups can also use Sublime\u2019s internal syntax highlighter to highlight your code.  The benefit here is that you get code highlighting in your popup that matches your current theme.  The highlighting ability is dependent upon what syntax packages you have installed in Sublime.  It also depends on whether they are enabled and mapped to a language keyword.  Pull requests are welcome to expand and keep the  language mapping  updated.  You can also define in your  Preferences.sublime-settings  file additional mappings to either personal syntax files, or while waiting for your mapping changes to be merged and released.  See  mdpopups.sublime_user_lang_map  for more info.  In your CSS template it is usually a good idea to generically specify the code wrapper background colors.  With the  CSS templates , this is very easy:  .highlight ,   .inline-highlight   {   {{ '.background' | css }}   }",
            "title": "Sublime Syntax Highlighter"
        },
        {
            "location": "/usage/#css-styling",
            "text": "MdPopups was design to give a universal way of displaying and styling tooltips and phantoms via plugins, but also provide the user an easy way to control the look.  MdPopups provides a simple base CSS that styles the basic HTML tags that can be used in the Markdown parser.  On top of that it then parses your current Sublime color scheme and generates CSS that includes styling for all the  standard TextMate scopes  (and only those listed scopes) found in your color scheme.  It then uses those scopes in a default template to highlight your tooltips and phantoms to match your current color scheme.  Templates are used so that a user can easily tap into all the colors, color filters, and other useful logic to control their tooltips and phantoms in one place without having to hard code a specific CSS for a specific color scheme.  Even though a plugin can additionally insert new scopes on demand when calling the popup API, a user can override anything and everything by providing their own  CSS template .  The template is fairly powerful and flexible.",
            "title": "CSS Styling"
        },
        {
            "location": "/usage/#css-templates",
            "text": "MdPoups provides a  base.css  that formats the general look of the HTML elements (padding, size, etc.).  On top of that, it provides a  default.css  template which applies more superficial styling such as colors, Pygments themes, etc.  It uses the Jinja2 template environment to give direct access to things like color scheme colors, names, and other useful information.  In general,  base.css  and  default.css  should provide most of what everyone  needs .  But if you  want  greater control, you can create your own CSS template which MdPopups which will override anything in  base.css  and  default.css .  All variables and filters below only apply the CSS, not the content.  The content only receives the variables  you  give it via  template_vars  and any options and filters you give it via the  template_env_options .  The css will receive the variables fed in through  template_vars , and in the case of CSS and content, both will place the plugin variables under the object  plugin .   New 1.13.0  User CSS now overrides  base.css  and  default.css  instead of replacing  default.css .  You can get the same effect as legacy by disabling  default styling  and creating your own user CSS.",
            "title": "CSS Templates"
        },
        {
            "location": "/usage/#sizes-relative-to-views-font-size",
            "text": "Notice  It is recommended moving forward (starting with mdpopups version 1.8.0 and SublimeText build 3119) to use  rem  units for relative sizes.  If you need to dynamically choose whether to use  rem  or  not, you can check the template variable  var.sublime_version .   Sizes can be defined relative to the current Sublime file view\u2019s font size.  An example would be ensuring font sizes in a popup or phantom match the size of the font in the Sublime Text file view.  The sizes that can be adjusted are  pt ,  em ,  px .   relativesize   Takes a relative specifier and inserts the size in the provided unit relative to the font size in the current Sublime Text file view. The filter is applied to a string that consists of a leading relative operator ( + ,  - , or  * ), a positive number, and one of three size types ( em ,  px , or  pt ).  relativesize  can also take a boolean to turn the the float value into a rounded int.     Operator  Description      +  Adds the specified value to the current font size.    -  Subtracts the specified value from the current font size.    *  Multiplies the value to the current font size. This allows both dividing and multiplying the font size by a given factor.  To cut in half:  *.5 .  To double the size  *2 .     Example :  h1   {   font-size :   {{ '+5px' | relativesize }} ;   }  h2   {   font-size :   {{ '+4px' | relativesize }} ;   }  h3   {   font-size :   {{ '+3px' | relativesize }} ;   }  h4   {   font-size :   {{ '+2px' | relativesize }} ;   }  h5   {   font-size :   {{ '+1px' | relativesize }} ;   }  h6   {   font-size :   {{ '+0px' | relativesize }} ;   }   Would become this (assuming a font size of 19px):  h1   {   font-size :   24px ;   }  h2   {   font-size :   23px ;   }  h3   {   font-size :   22px ;   }  h4   {   font-size :   21px ;   }  h5   {   font-size :   20px ;   }  h6   {   font-size :   19px ;   }   Example - Integer Rounding  ul ,   ol   {   padding-left :   {{ '*.5em' | relativesize ( True ) }} ;   }   Would become this (assuming a font size of 19px):  ul ,   ol   {   padding-left :   1em ;   }   The conversion factor between  px ,  pt , and  em  is assummed to be 16px \u2192 1em \u2192 12pt.  Whether this is what sublime is actually doing is another question.  We assume that the Sublime  font_size  setting is in  px  as this has given the best overall feel.   em  are not recommened for font sizes as I\u2019ve seen some strange behaviour when scaling  em  (even though the numbers seem to calculate correctly).   em  issues may not exists with elements that are not font, but please report any issues you find.   New 1.7.2  Integer rounded added in  1.7.2 .  Rounding not supported in old style call from  1.7.0 .    New 1.7.1  1.7.1  introduced the more simple format of  {{'+5px'|relativesize}} .  It is encouraged to adopt this format instead of  1.7.0  format as it will be removed in the future.    New 1.7.0  Added in  1.7.0 .  This was the  1.7.0  format which was cumbersome:  {{'+5'|relativesize('px')}} .  In  1.7.1 , it changed, but the old way is still supported.",
            "title": "Sizes Relative to View's Font Size"
        },
        {
            "location": "/usage/#template-colors",
            "text": "With the template environment, colors from the current Sublime color scheme can be accessed and manipulated.  Access to the Sublime color scheme styles are done via the  css  filter.   css   Retrieves the style for a specific TextMate scope from a Sublime color scheme.  By specifying either  .foreground ,  .background , or anyone of the standard TextMate scopes and then paring it with the  css  filter, all the related styles of the specified scope will be inserted into the css document.  Example :  This:  h1 ,   h2 ,   h3 ,   h4 ,   h5 ,   h6   {   {{ '.comment' | css }}   }   Might become this:  h1 ,   h2 ,   h3 ,   h4 ,   h5 ,   h6   {   color :   #888888 ;   font-style :   italic ;   }   Notice that the format of insertion is  key: value; .  You do not need a semicolon after.  If you add one, you may get multiple semicolons which may break some things.  If you need to get at a specific CSS attribute, you can specify its name in the  css  filter (available attributes are  color ,  background-color ,  font-style , and  font-weight ).  This:  h1 ,   h2 ,   h3 ,   h4 ,   h5 ,   h6   {   {{ '.comment' | css ( 'color' ) }}   }   Would then only include the color:  h1 ,   h2 ,   h3 ,   h4 ,   h5 ,   h6   {   color :   #888888   }   Some scopes might not have colors assigned to them, so multiple scopes can be defined, and the first one that matches will be used:  /* If `keyword.operator` is not explicitly used, fallback to `.keyword` */  h1 ,   h2 ,   h3 ,   h4 ,   h5 ,   h6   {   {{ '.keyword.operator, .keyword' | css ( 'color' ) }}   }     If desired you can convert a foreground color to a background color or vice versa.  To convert to a foreground color, you can use the  foreground  filter.  To convert to a background color, you can use the  background  filter.   foreground   Convert a background to a foreground.  Example :  body   {   {{ '.background' | css ( 'background-color' )| foreground }}   }     background   Convert a foreground to a background.  Example :  body   {   {{ '.foreground' | css ( 'color' )| background }}   }",
            "title": "Template Colors"
        },
        {
            "location": "/usage/#template-color-filtering",
            "text": "MdPopups also provides a number of color filters within the template environment that can manipulate the colors.  For instance, lets say you had your tooltip in the same color as the view window and it was difficult to see where the tooltip starts and ends.  You can take the color schemes background and apply a brightness filter to it allowing you now see the tooltip clearly.  Here we can make the background of the tooltip darker:  body   {   {{ '.background' | css ( 'background-color' )| brightness ( 0.9 ) }}   }   Color filters take a single color attribute of the form  key: value; .  So when feeding the filter with CSS, it is advised to specify the attribute in the  css  filter to limit the return to only one attribute as shown above; it may be difficult to tell how many attributes  css  could return without explicitly specifying attribute.  Color filters only take either  color  or  background-color  attributes.  Filters can be chained if more intensity is needed as some filters may clamp the value in one call. Multiple kinds of filters can also be chained together.  These are all the available filters:   brightness   Shifts brightness either dark or lighter. Brightness is relative to 1 where 1 means no change.  Accepted values are floats that are greater than 0.  Ranges are clamped between 0 and 2.  Example - Darken :  body   {   {{ '.background' | css ( 'background-color' )| brightness ( 0.9 ) }}   }    Example - Lighten :  body   {   {{ '.background' | css ( 'background-color' )| brightness ( 1.1 ) }}   }     saturation   Shifts the saturation either to right (saturate) or the left (desaturate).  Saturation is relative to 1 where 1 means no change.  Accepted values are floats that are greater than 0.  Ranges are clamped between 0 and 2.  Example - Desaturate :  body   {   {{ '.background' | css ( 'background-color' )| saturation ( 0.9 ) }}   }    Example - Saturate :  body   {   {{ '.background' | css ( 'background-color' )| saturation ( 1.1 ) }}   }     grayscale   Filters all colors to a grayish tone.  Example :  body   {   {{ '.background' | css ( 'background-color' )| grayscale }}   }     sepia   Filters all colors to a sepia tone.  Example :  body   {   {{ '.background' | css ( 'background-color' )| sepia }}   }     invert   Inverts a color.  Example :  body   {   {{ '.background' | css ( 'background-color' )| invert }}   }     colorize   Filters all colors to a shade of the specified hue.  Think grayscale, but instead of gray, you define a non-gray hue.  The values are angular dimensions starting at the red primary at 0\u00b0, passing through the green primary at 120\u00b0 and the blue primary at 240\u00b0, and then wrapping back to red at 360\u00b0.  Example :  body   {   {{ '.background' | css ( 'background-color' )| colorize ( 30 ) }}   }     hue   Shifts the current hue either to the left or right.  The values are angular dimensions starting at the red primary at 0\u00b0, passing through the green primary at 120\u00b0 and the blue primary at 240\u00b0, and then wrapping back to red at 360\u00b0.  Values can either be negative to shift left or positive to shift the hue to the right.  Example - Left Shift :  body   {   {{ '.background' | css ( 'background-color' )| hue (- 30 ) }}   }    Example - Left Right :  body   {   {{ '.background' | css ( 'background-color' )| hue ( 30 ) }}   }     fade   Fades a color. Essentially it is like apply transparency to the color allowing the color schemes base background color to show through.  Example - Fade 50% :  body   {   {{ '.foreground' | css ( 'color' )| fade ( 0.5 ) }}   }",
            "title": "Template Color Filtering"
        },
        {
            "location": "/usage/#include-css",
            "text": "The template environment allows for retrieving built-in Pygments CSS or retrieving CSS resources from the Sublime Packages.   pygments   Retrieve a built-in Pygments color scheme.  Example :  {{ 'native' | pygments }}     getcss   Retrieve a CSS file from Sublime\u2019s  Packages  folder.  CSS retrieved in this manner can include template variables and filters.  Example :  {{ 'Packages/User/aprosopo-dark.css' | getcss }}",
            "title": "Include CSS"
        },
        {
            "location": "/usage/#template-variables",
            "text": "The template environment provides a couple of variables that can be used to conditionally alter the CSS output.  Variables are found under  var .   var.sublime_version   sublime_version  contains the current SublimeText version.  This allows you conditionally handle CSS features that are specific to a SublimeText version.  Example  {%   if   var.sublime_version   >=   3119   %}  padding :   0 .2rem ;  {%   else   %}  padding :   0 .2em ;  {%   endif   %}     New 1.8.0  Added in  1.8.0 .    var.mdpopups_version   mdpopups_version  contains the current mdpopup version which you can use in your CSS templates if needed.  Example  {%   if   var.mdpopups_version   >=   ( 1.9 .0 )   %}  /* do something */  {%   else   %}  /* do something else */  {%   endif   %}     New 1.9.0  Added in  1.9.0 .    var.default_formatting   Flag specifying whether default formatting is being used.  See  mdpopups.default_formatting  for how to control this flag.  And see  base.css  for an example of how it is used.   New 1.9.0  Added in  1.9.0 .    var.default_style   Flag specifying whether default styling is being used.  See  mdpopups.default_style  for how to control this flag.  And see  default.css  for an example of how it is used.   New 1.13.0  Added in  1.13.0 .    var.is_dark | var.is_light   is_dark  checks if the color scheme is a dark color scheme.  Alternatively,  is_light  checks if the color scheme is a light color scheme.  Example :  {%   if   var.is_light   %}  html {   {{ '.background' | css ( 'background-color' )| brightness ( 0.9 ) }}   }  {%   else   %}  html {   {{ '.background' | css ( 'background-color' )| brightness ( 1.1 ) }}   }  {%   endif   %}     var.is_popup | var.is_phantom   is_phantom  checks if the current CSS is for a phantom instead of a popup.  Alternatively,  is_popup  checks if the current use of the CSS is for a popup.  Example :  {%   if   var.is_phantom   %}  html {   {{ '.background' | css ( 'background-color' )| brightness ( 0.9 ) }}   }  {%   else   %}  html {   {{ '.background' | css ( 'background-color' )| brightness ( 1.1 ) }}   }  {%   endif   %}     New 1.6.0  Added in  1.6.0 .    var.use_pygments   Checks if the Pygments syntax highlighter is being used.  Example :  {%   if   var.use_pygments   %}  {%   if   var.is_light   %}  {{ 'default' | pygments }}  {%   else   %}  {{ 'native' | pygments }}  {%   endif   %}  {%   endif   %}     var.color_scheme   Retrieves the current color schemes name.  Example :  {%   if   ( \n     var.color_scheme   in   ( \n         'Packages/Theme - Aprosopo/Tomorrow-Night-Eighties-Stormy.tmTheme' , \n         'Packages/Theme - Aprosopo/Tomorrow-Morning.tmTheme' , \n     )  )   %}  a   {   {{ '.keyword.operator' | css ( 'color' ) }}   }  {%   else   %}  a   {   {{ '.support.function' | css ( 'color' ) }}   }  {%   endif   %}",
            "title": "Template Variables"
        },
        {
            "location": "/textmate_scopes/",
            "text": "TextMate Scopes\n\n\nStandardized scopes supported by TextMate\n\n\n\n\nSupported Scopes\n\n\nMarkdown Popups supports the standard TextMate scopes found in the \nmanual\n plus \nforeground\n and \nbackground\n.\n\n\n\n\ncomment\n\n\ncomment.line\n\n\ncomment.line.double-slash\n\n\ncomment.line.double-dash\n\n\ncomment.line.number-sign\n\n\ncomment.line.percentage\n\n\ncomment.line.character\n\n\ncomment.block\n\n\ncomment.block.documentation\n\n\nconstant\n\n\nconstant.numeric\n\n\nconstant.character\n\n\nconstant.language\n\n\nconstant.other\n\n\nentity\n\n\nentity.name\n\n\nentity.name.function\n\n\nentity.name.type\n\n\nentity.name.tag\n\n\nentity.name.section\n\n\nentity.other\n\n\nentity.other.inherited-class\n\n\nentity.other.attribute-name\n\n\ninvalid\n\n\ninvalid.illegal\n\n\ninvalid.deprecated\n\n\nkeyword\n\n\nkeyword.control\n\n\nkeyword.operator\n\n\nkeyword.other\n\n\nmarkup\n\n\nmarkup.underline\n\n\nmarkup.underline.link\n\n\nmarkup.bold\n\n\nmarkup.heading\n\n\nmarkup.italic\n\n\nmarkup.list\n\n\nmarkup.list.numbered\n\n\nmarkup.list.unnumbered\n\n\nmarkup.quote\n\n\nmarkup.raw\n\n\nmarkup.other\n\n\nmeta\n\n\nstorage\n\n\nstorage.type\n\n\nstorage.modifier\n\n\nstring\n\n\nstring.quoted\n\n\nstring.quoted.single\n\n\nstring.quoted.double\n\n\nstring.quoted.triple\n\n\nstring.quoted.other\n\n\nstring.unquoted\n\n\nstring.interpolated\n\n\nstring.regexp\n\n\nstring.other\n\n\nsupport\n\n\nsupport.function\n\n\nsupport.class\n\n\nsupport.type\n\n\nsupport.constant\n\n\nsupport.variable\n\n\nsupport.other\n\n\nvariable.parameter\n\n\nvariable.language\n\n\nvariable.other",
            "title": "TextMate Scopes"
        },
        {
            "location": "/textmate_scopes/#textmate-scopes",
            "text": "Standardized scopes supported by TextMate",
            "title": "TextMate Scopes"
        },
        {
            "location": "/textmate_scopes/#supported-scopes",
            "text": "Markdown Popups supports the standard TextMate scopes found in the  manual  plus  foreground  and  background .   comment  comment.line  comment.line.double-slash  comment.line.double-dash  comment.line.number-sign  comment.line.percentage  comment.line.character  comment.block  comment.block.documentation  constant  constant.numeric  constant.character  constant.language  constant.other  entity  entity.name  entity.name.function  entity.name.type  entity.name.tag  entity.name.section  entity.other  entity.other.inherited-class  entity.other.attribute-name  invalid  invalid.illegal  invalid.deprecated  keyword  keyword.control  keyword.operator  keyword.other  markup  markup.underline  markup.underline.link  markup.bold  markup.heading  markup.italic  markup.list  markup.list.numbered  markup.list.unnumbered  markup.quote  markup.raw  markup.other  meta  storage  storage.type  storage.modifier  string  string.quoted  string.quoted.single  string.quoted.double  string.quoted.triple  string.quoted.other  string.unquoted  string.interpolated  string.regexp  string.other  support  support.function  support.class  support.type  support.constant  support.variable  support.other  variable.parameter  variable.language  variable.other",
            "title": "Supported Scopes"
        },
        {
            "location": "/faq/",
            "text": "F.A.Q.\n\n\nFrequently asked questions.\n\n\n\n\nQuestions\n\n\n\n\n\n\nWhy don\u2019t \n<\npre\n>\n tags work right?\n\n\nThis is because the HTML engine in Sublime treats \n<\npre\n>\n tags just as a normal block element; it doesn\u2019t treat the content as preformatted.  When MdPopups creates code blocks, it actually specially formats the blocks.  It converts tabs to 4 spaces, any contiguous spaces after the first are converted to \n&nbsp;\n.  And lastly, new lines get converted to \n<\nbr\n>\n tags.\n\n\n\n\n\n\nWhy in code blocks do tabs get converted to 4 spaces?\n\n\nBecause I like it that way.  If you are planning on having a snippet of text sent through the syntax highlighter and do not want your tabs to be converted to 4 spaces, you should convert it to the number of spaces you like \nbefore\n sending it through the syntax highlighter.\n\n\n\n\n\n\nWhy does <insert element> not work, or cause the tooltip not to show?\n\n\nBecause Sublime\u2019s HTML engine is extremely limited.  Though I do not have a complete list of all supported elements, you should keep things basic.  Things like \n<\ntable\n>\n will not work.\n\n\n\n\n\n\nWhy can\u2019t I get CSS selectors like this to work: \ndiv\n \np\n \n{\n \n...\n \n}\n?\n\n\nThis now work in Sublime Text build 3119+, but read on if you are below that build. Sublime\u2019s CSS handling is very limited and cannot handle parent and child selectors etc.  It handles one element at a time only.  You can chain classes: \n.myclass.myotherclass\n, but you \ncannot\n have a parent and a child class selector or elementes: \n.myclass\n \n.myotherclass\n.\n\n\n\n\n\n\nI tried pushing a massive amount of HTML through the tooltip and Sublime crashed.  What do I do?\n\n\nThis may be more stable now, but I will leave this here just in case.  I won\u2019t bother getting into the fact that technically Sublime should handle these situation gracefully, so I\u2019ll just say that the tooltip API has some limitations; use it reasonably.",
            "title": "F.A.Q"
        },
        {
            "location": "/faq/#faq",
            "text": "Frequently asked questions.",
            "title": "F.A.Q."
        },
        {
            "location": "/faq/#questions",
            "text": "Why don\u2019t  < pre >  tags work right?  This is because the HTML engine in Sublime treats  < pre >  tags just as a normal block element; it doesn\u2019t treat the content as preformatted.  When MdPopups creates code blocks, it actually specially formats the blocks.  It converts tabs to 4 spaces, any contiguous spaces after the first are converted to  &nbsp; .  And lastly, new lines get converted to  < br >  tags.    Why in code blocks do tabs get converted to 4 spaces?  Because I like it that way.  If you are planning on having a snippet of text sent through the syntax highlighter and do not want your tabs to be converted to 4 spaces, you should convert it to the number of spaces you like  before  sending it through the syntax highlighter.    Why does <insert element> not work, or cause the tooltip not to show?  Because Sublime\u2019s HTML engine is extremely limited.  Though I do not have a complete list of all supported elements, you should keep things basic.  Things like  < table >  will not work.    Why can\u2019t I get CSS selectors like this to work:  div   p   {   ...   } ?  This now work in Sublime Text build 3119+, but read on if you are below that build. Sublime\u2019s CSS handling is very limited and cannot handle parent and child selectors etc.  It handles one element at a time only.  You can chain classes:  .myclass.myotherclass , but you  cannot  have a parent and a child class selector or elementes:  .myclass   .myotherclass .    I tried pushing a massive amount of HTML through the tooltip and Sublime crashed.  What do I do?  This may be more stable now, but I will leave this here just in case.  I won\u2019t bother getting into the fact that technically Sublime should handle these situation gracefully, so I\u2019ll just say that the tooltip API has some limitations; use it reasonably.",
            "title": "Questions"
        },
        {
            "location": "/contributing/",
            "text": "Contributing & Support\n\n\nSteps for contributing and getting support.\n\n\n\n\nOverview\n\n\n\n\n\n\n\n\nSublime Versions\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nST3\n\n\nFully supported and actively maintained.\n\n\n\n\n\n\n\n\nContribution from the community is encouraged and can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\nBug Reports\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try to find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen creating an issue on the repository, please provide as much info as possible:\n\n\n\n\nSublime Text build.\n\n\nOperating system.\n\n\nErrors in console.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.\n\n\n\n\nThe more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\n\nTake part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.\n\n\nPull Requests\n\n\nPull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.\n\n\nContinuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.\n\n\nFeel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.\n\n\nRunning Validation Tests\n\n\nLinting is performed on the entire project with \nflake8\n, \nflake8-docstrings\n, \nflake8-putty\n, and \npep8-naming\n.  These can be installed via:\n\n\npip install flake8\npip install flake8-docstrings\npip install flake8-putty\npip install pep8-naming\n\n\n\n\n\nLinting is performed with the following command:\n\n\nflake8 .\n\n\n\n\n\nDocumentation Improvements\n\n\nA ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn\u2019t be any need to run validation tests if only updating documentation.\n\n\nYou don\u2019t have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of \nmkdocs\n with my own custom Python Markdown \nextensions\n to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is \nmkdocs serve\n from the root directory.",
            "title": "Contributing &amp; Support"
        },
        {
            "location": "/contributing/#contributing-support",
            "text": "Steps for contributing and getting support.",
            "title": "Contributing &amp; Support"
        },
        {
            "location": "/contributing/#overview",
            "text": "Sublime Versions  Description      ST3  Fully supported and actively maintained.     Contribution from the community is encouraged and can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Documentation improvements via pull requests.",
            "title": "Overview"
        },
        {
            "location": "/contributing/#bug-reports",
            "text": "Please  read the documentation  and  search the issue tracker  to try to find the answer to your question  before  posting an issue.    When creating an issue on the repository, please provide as much info as possible:   Sublime Text build.  Operating system.  Errors in console.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.   The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.",
            "title": "Bug Reports"
        },
        {
            "location": "/contributing/#reviewing-code",
            "text": "Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.",
            "title": "Reviewing Code"
        },
        {
            "location": "/contributing/#pull-requests",
            "text": "Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.  Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.  Feel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.",
            "title": "Pull Requests"
        },
        {
            "location": "/contributing/#running-validation-tests",
            "text": "Linting is performed on the entire project with  flake8 ,  flake8-docstrings ,  flake8-putty , and  pep8-naming .  These can be installed via:  pip install flake8\npip install flake8-docstrings\npip install flake8-putty\npip install pep8-naming  Linting is performed with the following command:  flake8 .",
            "title": "Running Validation Tests"
        },
        {
            "location": "/contributing/#documentation-improvements",
            "text": "A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn\u2019t be any need to run validation tests if only updating documentation.  You don\u2019t have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of  mkdocs  with my own custom Python Markdown  extensions  to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is  mkdocs serve  from the root directory.",
            "title": "Documentation Improvements"
        },
        {
            "location": "/license/",
            "text": "License\n\n\n\n\nSublime Markdown Popups is released under the MIT license.\n\n\nCopyright \u00a9 2015 - 2016 Isaac Muse \nisaacmuse@gmail.com\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
            "title": "License"
        },
        {
            "location": "/license/#license",
            "text": "Sublime Markdown Popups is released under the MIT license.  Copyright \u00a9 2015 - 2016 Isaac Muse  isaacmuse@gmail.com  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
            "title": "License"
        }
    ]
}